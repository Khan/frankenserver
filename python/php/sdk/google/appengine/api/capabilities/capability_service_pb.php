<?php
/**
 * Copyright 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
# Generated by the protocol buffer compiler. DO NOT EDIT!
# source: google/appengine/api/capabilities/capability_service.proto

namespace dummy {
  require_once 'google/appengine/runtime/proto/ProtocolMessage.php';
  require_once 'google/appengine/base/capabilities_pb.php';
}
namespace google\appengine {
  class IsEnabledRequest extends \google\net\ProtocolMessage {
    private $capability = array();
    private $call = array();
    public function getPackage() {
      if (!isset($this->package)) {
        return '';
      }
      return $this->package;
    }
    public function setPackage($val) {
      $this->package = $val;
      return $this;
    }
    public function clearPackage() {
      unset($this->package);
      return $this;
    }
    public function hasPackage() {
      return isset($this->package);
    }
    public function getCapabilitySize() {
      return sizeof($this->capability);
    }
    public function getCapabilityList() {
      return $this->capability;
    }
    public function getCapability($idx) {
      return $this->capability[$idx];
    }
    public function setCapability($idx, $val) {
      $this->capability[$idx] = $val;
      return $this;
    }
    public function addCapability($val) {
      $this->capability[] = $val;
      return $this;
    }
    public function clearCapability() {
      $this->capability = array();
    }
    public function getCallSize() {
      return sizeof($this->call);
    }
    public function getCallList() {
      return $this->call;
    }
    public function getCall($idx) {
      return $this->call[$idx];
    }
    public function setCall($idx, $val) {
      $this->call[$idx] = $val;
      return $this;
    }
    public function addCall($val) {
      $this->call[] = $val;
      return $this;
    }
    public function clearCall() {
      $this->call = array();
    }
    public function clear() {
      $this->clearPackage();
      $this->clearCapability();
      $this->clearCall();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->package)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->package));
      }
      $this->checkProtoArray($this->capability);
      $res += 1 * sizeof($this->capability);
      foreach ($this->capability as $value) {
        $res += $this->lengthString(strlen($value));
      }
      $this->checkProtoArray($this->call);
      $res += 1 * sizeof($this->call);
      foreach ($this->call as $value) {
        $res += $this->lengthString(strlen($value));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->package)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->package);
      }
      $this->checkProtoArray($this->capability);
      foreach ($this->capability as $value) {
        $out->putVarInt32(18);
        $out->putPrefixedString($value);
      }
      $this->checkProtoArray($this->call);
      foreach ($this->call as $value) {
        $out->putVarInt32(26);
        $out->putPrefixedString($value);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setPackage(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->addCapability(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->addCall(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->package)) return 'package';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasPackage()) {
        $this->setPackage($x->getPackage());
      }
      foreach ($x->getCapabilityList() as $v) {
        $this->addCapability($v);
      }
      foreach ($x->getCallList() as $v) {
        $this->addCall($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->package) !== isset($x->package)) return false;
      if (isset($this->package) && $this->package !== $x->package) return false;
      if (sizeof($this->capability) !== sizeof($x->capability)) return false;
      foreach (array_map(null, $this->capability, $x->capability) as $v) {
        if ($v[0] !== $v[1]) return false;
      }
      if (sizeof($this->call) !== sizeof($x->call)) return false;
      foreach (array_map(null, $this->call, $x->call) as $v) {
        if ($v[0] !== $v[1]) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->package)) {
        $res .= $prefix . "package: " . $this->debugFormatString($this->package) . "\n";
      }
      foreach ($this->capability as $value) {
        $res .= $prefix . "capability: " . $this->debugFormatString($value) . "\n";
      }
      foreach ($this->call as $value) {
        $res .= $prefix . "call: " . $this->debugFormatString($value) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine\IsEnabledResponse {
  class SummaryStatus {
    const ENABLED = 1;
    const SCHEDULED_FUTURE = 2;
    const SCHEDULED_NOW = 3;
    const DISABLED = 4;
    const UNKNOWN = 5;
  }
}
namespace google\appengine {
  class IsEnabledResponse extends \google\net\ProtocolMessage {
    private $config = array();
    public function getSummaryStatus() {
      if (!isset($this->summary_status)) {
        return 1;
      }
      return $this->summary_status;
    }
    public function setSummaryStatus($val) {
      $this->summary_status = $val;
      return $this;
    }
    public function clearSummaryStatus() {
      unset($this->summary_status);
      return $this;
    }
    public function hasSummaryStatus() {
      return isset($this->summary_status);
    }
    public function getTimeUntilScheduled() {
      if (!isset($this->time_until_scheduled)) {
        return "0";
      }
      return $this->time_until_scheduled;
    }
    public function setTimeUntilScheduled($val) {
      if (is_double($val)) {
        $this->time_until_scheduled = sprintf('%0.0F', $val);
      } else {
        $this->time_until_scheduled = $val;
      }
      return $this;
    }
    public function clearTimeUntilScheduled() {
      unset($this->time_until_scheduled);
      return $this;
    }
    public function hasTimeUntilScheduled() {
      return isset($this->time_until_scheduled);
    }
    public function getConfigSize() {
      return sizeof($this->config);
    }
    public function getConfigList() {
      return $this->config;
    }
    public function mutableConfig($idx) {
      if (!isset($this->config[$idx])) {
        $val = new \google\appengine\CapabilityConfig();
        $this->config[$idx] = $val;
        return $val;
      }
      return $this->config[$idx];
    }
    public function getConfig($idx) {
      if (isset($this->config[$idx])) {
        return $this->config[$idx];
      }
      if ($idx >= end(array_keys($this->config))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\CapabilityConfig();
    }
    public function addConfig() {
      $val = new \google\appengine\CapabilityConfig();
      $this->config[] = $val;
      return $val;
    }
    public function clearConfig() {
      $this->config = array();
    }
    public function clear() {
      $this->clearSummaryStatus();
      $this->clearTimeUntilScheduled();
      $this->clearConfig();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->summary_status)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->summary_status);
      }
      if (isset($this->time_until_scheduled)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->time_until_scheduled);
      }
      $this->checkProtoArray($this->config);
      $res += 1 * sizeof($this->config);
      foreach ($this->config as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->summary_status)) {
        $out->putVarInt32(8);
        $out->putVarInt32($this->summary_status);
      }
      if (isset($this->time_until_scheduled)) {
        $out->putVarInt32(16);
        $out->putVarInt64($this->time_until_scheduled);
      }
      $this->checkProtoArray($this->config);
      foreach ($this->config as $value) {
        $out->putVarInt32(26);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 8:
            $this->setSummaryStatus($d->getVarInt32());
            break;
          case 16:
            $this->setTimeUntilScheduled($d->getVarInt64());
            break;
          case 26:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addConfig()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->summary_status)) return 'summary_status';
      foreach ($this->config as $value) {
        if (!$value->isInitialized()) return 'config';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasSummaryStatus()) {
        $this->setSummaryStatus($x->getSummaryStatus());
      }
      if ($x->hasTimeUntilScheduled()) {
        $this->setTimeUntilScheduled($x->getTimeUntilScheduled());
      }
      foreach ($x->getConfigList() as $v) {
        $this->addConfig()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->summary_status) !== isset($x->summary_status)) return false;
      if (isset($this->summary_status) && $this->summary_status !== $x->summary_status) return false;
      if (isset($this->time_until_scheduled) !== isset($x->time_until_scheduled)) return false;
      if (isset($this->time_until_scheduled) && !$this->integerEquals($this->time_until_scheduled, $x->time_until_scheduled)) return false;
      if (sizeof($this->config) !== sizeof($x->config)) return false;
      foreach (array_map(null, $this->config, $x->config) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->summary_status)) {
        $res .= $prefix . "summary_status: " . ($this->summary_status) . "\n";
      }
      if (isset($this->time_until_scheduled)) {
        $res .= $prefix . "time_until_scheduled: " . $this->debugFormatInt64($this->time_until_scheduled) . "\n";
      }
      foreach ($this->config as $value) {
        $res .= $prefix . "config <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
