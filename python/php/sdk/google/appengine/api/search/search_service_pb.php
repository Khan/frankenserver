<?php
/**
 * Copyright 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
# Generated by the protocol buffer compiler. DO NOT EDIT!
# source: google/appengine/api/search/search_service.proto

namespace dummy {
  if (!defined('GOOGLE_APPENGINE_CLASSLOADER')) {
    require_once 'google/appengine/runtime/proto/ProtocolMessage.php';
    require_once 'google/appengine/datastore/document_pb.php';
  }
}
namespace google\appengine\SearchServiceError {
  class ErrorCode {
    const OK = 0;
    const INVALID_REQUEST = 1;
    const TRANSIENT_ERROR = 2;
    const INTERNAL_ERROR = 3;
    const PERMISSION_DENIED = 4;
    const TIMEOUT = 5;
    const CONCURRENT_TRANSACTION = 6;
  }
}
namespace google\appengine {
  class SearchServiceError extends \google\net\ProtocolMessage {
    public function clear() {
    }
    public function byteSizePartial() {
      $res = 0;
      return $res;
    }
    public function outputPartial($out) {
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      return $res;
    }
  }
}
namespace google\appengine {
  class RequestStatus extends \google\net\ProtocolMessage {
    public function getCode() {
      if (!isset($this->code)) {
        return 0;
      }
      return $this->code;
    }
    public function setCode($val) {
      $this->code = $val;
      return $this;
    }
    public function clearCode() {
      unset($this->code);
      return $this;
    }
    public function hasCode() {
      return isset($this->code);
    }
    public function getErrorDetail() {
      if (!isset($this->error_detail)) {
        return '';
      }
      return $this->error_detail;
    }
    public function setErrorDetail($val) {
      $this->error_detail = $val;
      return $this;
    }
    public function clearErrorDetail() {
      unset($this->error_detail);
      return $this;
    }
    public function hasErrorDetail() {
      return isset($this->error_detail);
    }
    public function getCanonicalCode() {
      if (!isset($this->canonical_code)) {
        return 0;
      }
      return $this->canonical_code;
    }
    public function setCanonicalCode($val) {
      $this->canonical_code = $val;
      return $this;
    }
    public function clearCanonicalCode() {
      unset($this->canonical_code);
      return $this;
    }
    public function hasCanonicalCode() {
      return isset($this->canonical_code);
    }
    public function clear() {
      $this->clearCode();
      $this->clearErrorDetail();
      $this->clearCanonicalCode();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->code)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->code);
      }
      if (isset($this->error_detail)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->error_detail));
      }
      if (isset($this->canonical_code)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->canonical_code);
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->code)) {
        $out->putVarInt32(8);
        $out->putVarInt32($this->code);
      }
      if (isset($this->error_detail)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->error_detail);
      }
      if (isset($this->canonical_code)) {
        $out->putVarInt32(24);
        $out->putVarInt32($this->canonical_code);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 8:
            $this->setCode($d->getVarInt32());
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setErrorDetail(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 24:
            $this->setCanonicalCode($d->getVarInt32());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->code)) return 'code';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasCode()) {
        $this->setCode($x->getCode());
      }
      if ($x->hasErrorDetail()) {
        $this->setErrorDetail($x->getErrorDetail());
      }
      if ($x->hasCanonicalCode()) {
        $this->setCanonicalCode($x->getCanonicalCode());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->code) !== isset($x->code)) return false;
      if (isset($this->code) && $this->code !== $x->code) return false;
      if (isset($this->error_detail) !== isset($x->error_detail)) return false;
      if (isset($this->error_detail) && $this->error_detail !== $x->error_detail) return false;
      if (isset($this->canonical_code) !== isset($x->canonical_code)) return false;
      if (isset($this->canonical_code) && !$this->integerEquals($this->canonical_code, $x->canonical_code)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->code)) {
        $res .= $prefix . "code: " . ($this->code) . "\n";
      }
      if (isset($this->error_detail)) {
        $res .= $prefix . "error_detail: " . $this->debugFormatString($this->error_detail) . "\n";
      }
      if (isset($this->canonical_code)) {
        $res .= $prefix . "canonical_code: " . $this->debugFormatInt32($this->canonical_code) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine\IndexSpec {
  class Consistency {
    const GLOBAL_ = 0;
    const PER_DOCUMENT = 1;
  }
}
namespace google\appengine\IndexSpec {
  class Source {
    const SEARCH = 0;
    const DATASTORE = 1;
    const CLOUD_STORAGE = 2;
  }
}
namespace google\appengine\IndexSpec {
  class Mode {
    const PRIORITY = 0;
    const BACKGROUND = 1;
  }
}
namespace google\appengine {
  class IndexSpec extends \google\net\ProtocolMessage {
    public function getName() {
      if (!isset($this->name)) {
        return '';
      }
      return $this->name;
    }
    public function setName($val) {
      $this->name = $val;
      return $this;
    }
    public function clearName() {
      unset($this->name);
      return $this;
    }
    public function hasName() {
      return isset($this->name);
    }
    public function getConsistency() {
      if (!isset($this->consistency)) {
        return 1;
      }
      return $this->consistency;
    }
    public function setConsistency($val) {
      $this->consistency = $val;
      return $this;
    }
    public function clearConsistency() {
      unset($this->consistency);
      return $this;
    }
    public function hasConsistency() {
      return isset($this->consistency);
    }
    public function getNamespace() {
      if (!isset($this->namespace)) {
        return '';
      }
      return $this->namespace;
    }
    public function setNamespace($val) {
      $this->namespace = $val;
      return $this;
    }
    public function clearNamespace() {
      unset($this->namespace);
      return $this;
    }
    public function hasNamespace() {
      return isset($this->namespace);
    }
    public function getVersion() {
      if (!isset($this->version)) {
        return 0;
      }
      return $this->version;
    }
    public function setVersion($val) {
      $this->version = $val;
      return $this;
    }
    public function clearVersion() {
      unset($this->version);
      return $this;
    }
    public function hasVersion() {
      return isset($this->version);
    }
    public function getSource() {
      if (!isset($this->source)) {
        return 0;
      }
      return $this->source;
    }
    public function setSource($val) {
      $this->source = $val;
      return $this;
    }
    public function clearSource() {
      unset($this->source);
      return $this;
    }
    public function hasSource() {
      return isset($this->source);
    }
    public function getMode() {
      if (!isset($this->mode)) {
        return 0;
      }
      return $this->mode;
    }
    public function setMode($val) {
      $this->mode = $val;
      return $this;
    }
    public function clearMode() {
      unset($this->mode);
      return $this;
    }
    public function hasMode() {
      return isset($this->mode);
    }
    public function clear() {
      $this->clearName();
      $this->clearConsistency();
      $this->clearNamespace();
      $this->clearVersion();
      $this->clearSource();
      $this->clearMode();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->name)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->name));
      }
      if (isset($this->consistency)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->consistency);
      }
      if (isset($this->namespace)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->namespace));
      }
      if (isset($this->version)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->version);
      }
      if (isset($this->source)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->source);
      }
      if (isset($this->mode)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->mode);
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->name)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->name);
      }
      if (isset($this->consistency)) {
        $out->putVarInt32(16);
        $out->putVarInt32($this->consistency);
      }
      if (isset($this->namespace)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->namespace);
      }
      if (isset($this->version)) {
        $out->putVarInt32(32);
        $out->putVarInt32($this->version);
      }
      if (isset($this->source)) {
        $out->putVarInt32(40);
        $out->putVarInt32($this->source);
      }
      if (isset($this->mode)) {
        $out->putVarInt32(48);
        $out->putVarInt32($this->mode);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 16:
            $this->setConsistency($d->getVarInt32());
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setNamespace(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 32:
            $this->setVersion($d->getVarInt32());
            break;
          case 40:
            $this->setSource($d->getVarInt32());
            break;
          case 48:
            $this->setMode($d->getVarInt32());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->name)) return 'name';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasName()) {
        $this->setName($x->getName());
      }
      if ($x->hasConsistency()) {
        $this->setConsistency($x->getConsistency());
      }
      if ($x->hasNamespace()) {
        $this->setNamespace($x->getNamespace());
      }
      if ($x->hasVersion()) {
        $this->setVersion($x->getVersion());
      }
      if ($x->hasSource()) {
        $this->setSource($x->getSource());
      }
      if ($x->hasMode()) {
        $this->setMode($x->getMode());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->name) !== isset($x->name)) return false;
      if (isset($this->name) && $this->name !== $x->name) return false;
      if (isset($this->consistency) !== isset($x->consistency)) return false;
      if (isset($this->consistency) && $this->consistency !== $x->consistency) return false;
      if (isset($this->namespace) !== isset($x->namespace)) return false;
      if (isset($this->namespace) && $this->namespace !== $x->namespace) return false;
      if (isset($this->version) !== isset($x->version)) return false;
      if (isset($this->version) && !$this->integerEquals($this->version, $x->version)) return false;
      if (isset($this->source) !== isset($x->source)) return false;
      if (isset($this->source) && $this->source !== $x->source) return false;
      if (isset($this->mode) !== isset($x->mode)) return false;
      if (isset($this->mode) && $this->mode !== $x->mode) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->name)) {
        $res .= $prefix . "name: " . $this->debugFormatString($this->name) . "\n";
      }
      if (isset($this->consistency)) {
        $res .= $prefix . "consistency: " . ($this->consistency) . "\n";
      }
      if (isset($this->namespace)) {
        $res .= $prefix . "namespace: " . $this->debugFormatString($this->namespace) . "\n";
      }
      if (isset($this->version)) {
        $res .= $prefix . "version: " . $this->debugFormatInt32($this->version) . "\n";
      }
      if (isset($this->source)) {
        $res .= $prefix . "source: " . ($this->source) . "\n";
      }
      if (isset($this->mode)) {
        $res .= $prefix . "mode: " . ($this->mode) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine\IndexMetadata {
  class IndexState {
    const ACTIVE = 0;
    const SOFT_DELETED = 1;
    const PURGING = 2;
  }
}
namespace google\appengine\IndexMetadata {
  class Storage extends \google\net\ProtocolMessage {
    public function getAmountUsed() {
      if (!isset($this->amount_used)) {
        return "0";
      }
      return $this->amount_used;
    }
    public function setAmountUsed($val) {
      if (is_double($val)) {
        $this->amount_used = sprintf('%0.0F', $val);
      } else {
        $this->amount_used = $val;
      }
      return $this;
    }
    public function clearAmountUsed() {
      unset($this->amount_used);
      return $this;
    }
    public function hasAmountUsed() {
      return isset($this->amount_used);
    }
    public function getLimit() {
      if (!isset($this->limit)) {
        return "0";
      }
      return $this->limit;
    }
    public function setLimit($val) {
      if (is_double($val)) {
        $this->limit = sprintf('%0.0F', $val);
      } else {
        $this->limit = $val;
      }
      return $this;
    }
    public function clearLimit() {
      unset($this->limit);
      return $this;
    }
    public function hasLimit() {
      return isset($this->limit);
    }
    public function clear() {
      $this->clearAmountUsed();
      $this->clearLimit();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->amount_used)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->amount_used);
      }
      if (isset($this->limit)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->limit);
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->amount_used)) {
        $out->putVarInt32(8);
        $out->putVarInt64($this->amount_used);
      }
      if (isset($this->limit)) {
        $out->putVarInt32(16);
        $out->putVarInt64($this->limit);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 8:
            $this->setAmountUsed($d->getVarInt64());
            break;
          case 16:
            $this->setLimit($d->getVarInt64());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasAmountUsed()) {
        $this->setAmountUsed($x->getAmountUsed());
      }
      if ($x->hasLimit()) {
        $this->setLimit($x->getLimit());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->amount_used) !== isset($x->amount_used)) return false;
      if (isset($this->amount_used) && !$this->integerEquals($this->amount_used, $x->amount_used)) return false;
      if (isset($this->limit) !== isset($x->limit)) return false;
      if (isset($this->limit) && !$this->integerEquals($this->limit, $x->limit)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->amount_used)) {
        $res .= $prefix . "amount_used: " . $this->debugFormatInt64($this->amount_used) . "\n";
      }
      if (isset($this->limit)) {
        $res .= $prefix . "limit: " . $this->debugFormatInt64($this->limit) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class IndexMetadata extends \google\net\ProtocolMessage {
    private $field = array();
    public function getIndexSpec() {
      if (!isset($this->index_spec)) {
        return new \google\appengine\IndexSpec();
      }
      return $this->index_spec;
    }
    public function mutableIndexSpec() {
      if (!isset($this->index_spec)) {
        $res = new \google\appengine\IndexSpec();
        $this->index_spec = $res;
        return $res;
      }
      return $this->index_spec;
    }
    public function clearIndexSpec() {
      if (isset($this->index_spec)) {
        unset($this->index_spec);
      }
    }
    public function hasIndexSpec() {
      return isset($this->index_spec);
    }
    public function getFieldSize() {
      return sizeof($this->field);
    }
    public function getFieldList() {
      return $this->field;
    }
    public function mutableField($idx) {
      if (!isset($this->field[$idx])) {
        $val = new \storage_onestore_v3\FieldTypes();
        $this->field[$idx] = $val;
        return $val;
      }
      return $this->field[$idx];
    }
    public function getField($idx) {
      if (isset($this->field[$idx])) {
        return $this->field[$idx];
      }
      if ($idx >= end(array_keys($this->field))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \storage_onestore_v3\FieldTypes();
    }
    public function addField() {
      $val = new \storage_onestore_v3\FieldTypes();
      $this->field[] = $val;
      return $val;
    }
    public function clearField() {
      $this->field = array();
    }
    public function getStorage() {
      if (!isset($this->storage)) {
        return new \google\appengine\IndexMetadata\Storage();
      }
      return $this->storage;
    }
    public function mutableStorage() {
      if (!isset($this->storage)) {
        $res = new \google\appengine\IndexMetadata\Storage();
        $this->storage = $res;
        return $res;
      }
      return $this->storage;
    }
    public function clearStorage() {
      if (isset($this->storage)) {
        unset($this->storage);
      }
    }
    public function hasStorage() {
      return isset($this->storage);
    }
    public function getIndexState() {
      if (!isset($this->index_state)) {
        return 0;
      }
      return $this->index_state;
    }
    public function setIndexState($val) {
      $this->index_state = $val;
      return $this;
    }
    public function clearIndexState() {
      unset($this->index_state);
      return $this;
    }
    public function hasIndexState() {
      return isset($this->index_state);
    }
    public function getIndexDeleteTime() {
      if (!isset($this->index_delete_time)) {
        return "0";
      }
      return $this->index_delete_time;
    }
    public function setIndexDeleteTime($val) {
      if (is_double($val)) {
        $this->index_delete_time = sprintf('%0.0F', $val);
      } else {
        $this->index_delete_time = $val;
      }
      return $this;
    }
    public function clearIndexDeleteTime() {
      unset($this->index_delete_time);
      return $this;
    }
    public function hasIndexDeleteTime() {
      return isset($this->index_delete_time);
    }
    public function clear() {
      $this->clearIndexSpec();
      $this->clearField();
      $this->clearStorage();
      $this->clearIndexState();
      $this->clearIndexDeleteTime();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->index_spec)) {
        $res += 1;
        $res += $this->lengthString($this->index_spec->byteSizePartial());
      }
      $this->checkProtoArray($this->field);
      $res += 1 * sizeof($this->field);
      foreach ($this->field as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      if (isset($this->storage)) {
        $res += 1;
        $res += $this->lengthString($this->storage->byteSizePartial());
      }
      if (isset($this->index_state)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->index_state);
      }
      if (isset($this->index_delete_time)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->index_delete_time);
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->index_spec)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->index_spec->byteSizePartial());
        $this->index_spec->outputPartial($out);
      }
      $this->checkProtoArray($this->field);
      foreach ($this->field as $value) {
        $out->putVarInt32(18);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      if (isset($this->storage)) {
        $out->putVarInt32(26);
        $out->putVarInt32($this->storage->byteSizePartial());
        $this->storage->outputPartial($out);
      }
      if (isset($this->index_state)) {
        $out->putVarInt32(32);
        $out->putVarInt32($this->index_state);
      }
      if (isset($this->index_delete_time)) {
        $out->putVarInt32(40);
        $out->putVarInt64($this->index_delete_time);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableIndexSpec()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addField()->tryMerge($tmp);
            break;
          case 26:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableStorage()->tryMerge($tmp);
            break;
          case 32:
            $this->setIndexState($d->getVarInt32());
            break;
          case 40:
            $this->setIndexDeleteTime($d->getVarInt64());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->index_spec)) || (!$this->index_spec->isInitialized())) return 'index_spec';
      foreach ($this->field as $value) {
        if (!$value->isInitialized()) return 'field';
      }
      if (isset($this->storage) && (!$this->storage->isInitialized())) return 'storage';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasIndexSpec()) {
        $this->mutableIndexSpec()->mergeFrom($x->getIndexSpec());
      }
      foreach ($x->getFieldList() as $v) {
        $this->addField()->copyFrom($v);
      }
      if ($x->hasStorage()) {
        $this->mutableStorage()->mergeFrom($x->getStorage());
      }
      if ($x->hasIndexState()) {
        $this->setIndexState($x->getIndexState());
      }
      if ($x->hasIndexDeleteTime()) {
        $this->setIndexDeleteTime($x->getIndexDeleteTime());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->index_spec) !== isset($x->index_spec)) return false;
      if (isset($this->index_spec) && !$this->index_spec->equals($x->index_spec)) return false;
      if (sizeof($this->field) !== sizeof($x->field)) return false;
      foreach (array_map(null, $this->field, $x->field) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (isset($this->storage) !== isset($x->storage)) return false;
      if (isset($this->storage) && !$this->storage->equals($x->storage)) return false;
      if (isset($this->index_state) !== isset($x->index_state)) return false;
      if (isset($this->index_state) && $this->index_state !== $x->index_state) return false;
      if (isset($this->index_delete_time) !== isset($x->index_delete_time)) return false;
      if (isset($this->index_delete_time) && !$this->integerEquals($this->index_delete_time, $x->index_delete_time)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->index_spec)) {
        $res .= $prefix . "index_spec <\n" . $this->index_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      foreach ($this->field as $value) {
        $res .= $prefix . "field <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->storage)) {
        $res .= $prefix . "storage <\n" . $this->storage->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->index_state)) {
        $res .= $prefix . "index_state: " . ($this->index_state) . "\n";
      }
      if (isset($this->index_delete_time)) {
        $res .= $prefix . "index_delete_time: " . $this->debugFormatInt64($this->index_delete_time) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine\IndexDocumentParams {
  class Freshness {
    const SYNCHRONOUSLY = 0;
    const WHEN_CONVENIENT = 1;
  }
}
namespace google\appengine {
  class IndexDocumentParams extends \google\net\ProtocolMessage {
    private $document = array();
    public function getDocumentSize() {
      return sizeof($this->document);
    }
    public function getDocumentList() {
      return $this->document;
    }
    public function mutableDocument($idx) {
      if (!isset($this->document[$idx])) {
        $val = new \storage_onestore_v3\Document();
        $this->document[$idx] = $val;
        return $val;
      }
      return $this->document[$idx];
    }
    public function getDocument($idx) {
      if (isset($this->document[$idx])) {
        return $this->document[$idx];
      }
      if ($idx >= end(array_keys($this->document))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \storage_onestore_v3\Document();
    }
    public function addDocument() {
      $val = new \storage_onestore_v3\Document();
      $this->document[] = $val;
      return $val;
    }
    public function clearDocument() {
      $this->document = array();
    }
    public function getFreshness() {
      if (!isset($this->freshness)) {
        return 0;
      }
      return $this->freshness;
    }
    public function setFreshness($val) {
      $this->freshness = $val;
      return $this;
    }
    public function clearFreshness() {
      unset($this->freshness);
      return $this;
    }
    public function hasFreshness() {
      return isset($this->freshness);
    }
    public function getIndexSpec() {
      if (!isset($this->index_spec)) {
        return new \google\appengine\IndexSpec();
      }
      return $this->index_spec;
    }
    public function mutableIndexSpec() {
      if (!isset($this->index_spec)) {
        $res = new \google\appengine\IndexSpec();
        $this->index_spec = $res;
        return $res;
      }
      return $this->index_spec;
    }
    public function clearIndexSpec() {
      if (isset($this->index_spec)) {
        unset($this->index_spec);
      }
    }
    public function hasIndexSpec() {
      return isset($this->index_spec);
    }
    public function clear() {
      $this->clearDocument();
      $this->clearFreshness();
      $this->clearIndexSpec();
    }
    public function byteSizePartial() {
      $res = 0;
      $this->checkProtoArray($this->document);
      $res += 1 * sizeof($this->document);
      foreach ($this->document as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      if (isset($this->freshness)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->freshness);
      }
      if (isset($this->index_spec)) {
        $res += 1;
        $res += $this->lengthString($this->index_spec->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      $this->checkProtoArray($this->document);
      foreach ($this->document as $value) {
        $out->putVarInt32(10);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      if (isset($this->freshness)) {
        $out->putVarInt32(16);
        $out->putVarInt32($this->freshness);
      }
      if (isset($this->index_spec)) {
        $out->putVarInt32(26);
        $out->putVarInt32($this->index_spec->byteSizePartial());
        $this->index_spec->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addDocument()->tryMerge($tmp);
            break;
          case 16:
            $this->setFreshness($d->getVarInt32());
            break;
          case 26:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableIndexSpec()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      foreach ($this->document as $value) {
        if (!$value->isInitialized()) return 'document';
      }
      if ((!isset($this->index_spec)) || (!$this->index_spec->isInitialized())) return 'index_spec';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      foreach ($x->getDocumentList() as $v) {
        $this->addDocument()->copyFrom($v);
      }
      if ($x->hasFreshness()) {
        $this->setFreshness($x->getFreshness());
      }
      if ($x->hasIndexSpec()) {
        $this->mutableIndexSpec()->mergeFrom($x->getIndexSpec());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (sizeof($this->document) !== sizeof($x->document)) return false;
      foreach (array_map(null, $this->document, $x->document) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (isset($this->freshness) !== isset($x->freshness)) return false;
      if (isset($this->freshness) && $this->freshness !== $x->freshness) return false;
      if (isset($this->index_spec) !== isset($x->index_spec)) return false;
      if (isset($this->index_spec) && !$this->index_spec->equals($x->index_spec)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      foreach ($this->document as $value) {
        $res .= $prefix . "document <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->freshness)) {
        $res .= $prefix . "freshness: " . ($this->freshness) . "\n";
      }
      if (isset($this->index_spec)) {
        $res .= $prefix . "index_spec <\n" . $this->index_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class IndexDocumentRequest extends \google\net\ProtocolMessage {
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\IndexDocumentParams();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\IndexDocumentParams();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function getAppId() {
      if (!isset($this->app_id)) {
        return '';
      }
      return $this->app_id;
    }
    public function setAppId($val) {
      $this->app_id = $val;
      return $this;
    }
    public function clearAppId() {
      unset($this->app_id);
      return $this;
    }
    public function hasAppId() {
      return isset($this->app_id);
    }
    public function clear() {
      $this->clearParams();
      $this->clearAppId();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      if (isset($this->app_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->app_id));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->params)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
      if (isset($this->app_id)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->app_id);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setAppId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->params)) || (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
      if ($x->hasAppId()) {
        $this->setAppId($x->getAppId());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      if (isset($this->app_id) !== isset($x->app_id)) return false;
      if (isset($this->app_id) && $this->app_id !== $x->app_id) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->app_id)) {
        $res .= $prefix . "app_id: " . $this->debugFormatString($this->app_id) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class IndexDocumentResponse extends \google\net\ProtocolMessage {
    private $status = array();
    private $doc_id = array();
    public function getStatusSize() {
      return sizeof($this->status);
    }
    public function getStatusList() {
      return $this->status;
    }
    public function mutableStatus($idx) {
      if (!isset($this->status[$idx])) {
        $val = new \google\appengine\RequestStatus();
        $this->status[$idx] = $val;
        return $val;
      }
      return $this->status[$idx];
    }
    public function getStatus($idx) {
      if (isset($this->status[$idx])) {
        return $this->status[$idx];
      }
      if ($idx >= end(array_keys($this->status))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\RequestStatus();
    }
    public function addStatus() {
      $val = new \google\appengine\RequestStatus();
      $this->status[] = $val;
      return $val;
    }
    public function clearStatus() {
      $this->status = array();
    }
    public function getDocIdSize() {
      return sizeof($this->doc_id);
    }
    public function getDocIdList() {
      return $this->doc_id;
    }
    public function getDocId($idx) {
      return $this->doc_id[$idx];
    }
    public function setDocId($idx, $val) {
      $this->doc_id[$idx] = $val;
      return $this;
    }
    public function addDocId($val) {
      $this->doc_id[] = $val;
      return $this;
    }
    public function clearDocId() {
      $this->doc_id = array();
    }
    public function clear() {
      $this->clearStatus();
      $this->clearDocId();
    }
    public function byteSizePartial() {
      $res = 0;
      $this->checkProtoArray($this->status);
      $res += 1 * sizeof($this->status);
      foreach ($this->status as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      $this->checkProtoArray($this->doc_id);
      $res += 1 * sizeof($this->doc_id);
      foreach ($this->doc_id as $value) {
        $res += $this->lengthString(strlen($value));
      }
      return $res;
    }
    public function outputPartial($out) {
      $this->checkProtoArray($this->status);
      foreach ($this->status as $value) {
        $out->putVarInt32(10);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      $this->checkProtoArray($this->doc_id);
      foreach ($this->doc_id as $value) {
        $out->putVarInt32(18);
        $out->putPrefixedString($value);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addStatus()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->addDocId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      foreach ($this->status as $value) {
        if (!$value->isInitialized()) return 'status';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      foreach ($x->getStatusList() as $v) {
        $this->addStatus()->copyFrom($v);
      }
      foreach ($x->getDocIdList() as $v) {
        $this->addDocId($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (sizeof($this->status) !== sizeof($x->status)) return false;
      foreach (array_map(null, $this->status, $x->status) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (sizeof($this->doc_id) !== sizeof($x->doc_id)) return false;
      foreach (array_map(null, $this->doc_id, $x->doc_id) as $v) {
        if ($v[0] !== $v[1]) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      foreach ($this->status as $value) {
        $res .= $prefix . "status <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      foreach ($this->doc_id as $value) {
        $res .= $prefix . "doc_id: " . $this->debugFormatString($value) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteDocumentParams extends \google\net\ProtocolMessage {
    private $doc_id = array();
    public function getDocIdSize() {
      return sizeof($this->doc_id);
    }
    public function getDocIdList() {
      return $this->doc_id;
    }
    public function getDocId($idx) {
      return $this->doc_id[$idx];
    }
    public function setDocId($idx, $val) {
      $this->doc_id[$idx] = $val;
      return $this;
    }
    public function addDocId($val) {
      $this->doc_id[] = $val;
      return $this;
    }
    public function clearDocId() {
      $this->doc_id = array();
    }
    public function getIndexSpec() {
      if (!isset($this->index_spec)) {
        return new \google\appengine\IndexSpec();
      }
      return $this->index_spec;
    }
    public function mutableIndexSpec() {
      if (!isset($this->index_spec)) {
        $res = new \google\appengine\IndexSpec();
        $this->index_spec = $res;
        return $res;
      }
      return $this->index_spec;
    }
    public function clearIndexSpec() {
      if (isset($this->index_spec)) {
        unset($this->index_spec);
      }
    }
    public function hasIndexSpec() {
      return isset($this->index_spec);
    }
    public function clear() {
      $this->clearDocId();
      $this->clearIndexSpec();
    }
    public function byteSizePartial() {
      $res = 0;
      $this->checkProtoArray($this->doc_id);
      $res += 1 * sizeof($this->doc_id);
      foreach ($this->doc_id as $value) {
        $res += $this->lengthString(strlen($value));
      }
      if (isset($this->index_spec)) {
        $res += 1;
        $res += $this->lengthString($this->index_spec->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      $this->checkProtoArray($this->doc_id);
      foreach ($this->doc_id as $value) {
        $out->putVarInt32(10);
        $out->putPrefixedString($value);
      }
      if (isset($this->index_spec)) {
        $out->putVarInt32(18);
        $out->putVarInt32($this->index_spec->byteSizePartial());
        $this->index_spec->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->addDocId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 18:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableIndexSpec()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->index_spec)) || (!$this->index_spec->isInitialized())) return 'index_spec';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      foreach ($x->getDocIdList() as $v) {
        $this->addDocId($v);
      }
      if ($x->hasIndexSpec()) {
        $this->mutableIndexSpec()->mergeFrom($x->getIndexSpec());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (sizeof($this->doc_id) !== sizeof($x->doc_id)) return false;
      foreach (array_map(null, $this->doc_id, $x->doc_id) as $v) {
        if ($v[0] !== $v[1]) return false;
      }
      if (isset($this->index_spec) !== isset($x->index_spec)) return false;
      if (isset($this->index_spec) && !$this->index_spec->equals($x->index_spec)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      foreach ($this->doc_id as $value) {
        $res .= $prefix . "doc_id: " . $this->debugFormatString($value) . "\n";
      }
      if (isset($this->index_spec)) {
        $res .= $prefix . "index_spec <\n" . $this->index_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteDocumentRequest extends \google\net\ProtocolMessage {
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\DeleteDocumentParams();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\DeleteDocumentParams();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function getAppId() {
      if (!isset($this->app_id)) {
        return '';
      }
      return $this->app_id;
    }
    public function setAppId($val) {
      $this->app_id = $val;
      return $this;
    }
    public function clearAppId() {
      unset($this->app_id);
      return $this;
    }
    public function hasAppId() {
      return isset($this->app_id);
    }
    public function clear() {
      $this->clearParams();
      $this->clearAppId();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      if (isset($this->app_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->app_id));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->params)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
      if (isset($this->app_id)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->app_id);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setAppId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->params)) || (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
      if ($x->hasAppId()) {
        $this->setAppId($x->getAppId());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      if (isset($this->app_id) !== isset($x->app_id)) return false;
      if (isset($this->app_id) && $this->app_id !== $x->app_id) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->app_id)) {
        $res .= $prefix . "app_id: " . $this->debugFormatString($this->app_id) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteDocumentResponse extends \google\net\ProtocolMessage {
    private $status = array();
    public function getStatusSize() {
      return sizeof($this->status);
    }
    public function getStatusList() {
      return $this->status;
    }
    public function mutableStatus($idx) {
      if (!isset($this->status[$idx])) {
        $val = new \google\appengine\RequestStatus();
        $this->status[$idx] = $val;
        return $val;
      }
      return $this->status[$idx];
    }
    public function getStatus($idx) {
      if (isset($this->status[$idx])) {
        return $this->status[$idx];
      }
      if ($idx >= end(array_keys($this->status))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\RequestStatus();
    }
    public function addStatus() {
      $val = new \google\appengine\RequestStatus();
      $this->status[] = $val;
      return $val;
    }
    public function clearStatus() {
      $this->status = array();
    }
    public function clear() {
      $this->clearStatus();
    }
    public function byteSizePartial() {
      $res = 0;
      $this->checkProtoArray($this->status);
      $res += 1 * sizeof($this->status);
      foreach ($this->status as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      $this->checkProtoArray($this->status);
      foreach ($this->status as $value) {
        $out->putVarInt32(10);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addStatus()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      foreach ($this->status as $value) {
        if (!$value->isInitialized()) return 'status';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      foreach ($x->getStatusList() as $v) {
        $this->addStatus()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (sizeof($this->status) !== sizeof($x->status)) return false;
      foreach (array_map(null, $this->status, $x->status) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      foreach ($this->status as $value) {
        $res .= $prefix . "status <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class ListDocumentsParams extends \google\net\ProtocolMessage {
    public function getIndexSpec() {
      if (!isset($this->index_spec)) {
        return new \google\appengine\IndexSpec();
      }
      return $this->index_spec;
    }
    public function mutableIndexSpec() {
      if (!isset($this->index_spec)) {
        $res = new \google\appengine\IndexSpec();
        $this->index_spec = $res;
        return $res;
      }
      return $this->index_spec;
    }
    public function clearIndexSpec() {
      if (isset($this->index_spec)) {
        unset($this->index_spec);
      }
    }
    public function hasIndexSpec() {
      return isset($this->index_spec);
    }
    public function getStartDocId() {
      if (!isset($this->start_doc_id)) {
        return '';
      }
      return $this->start_doc_id;
    }
    public function setStartDocId($val) {
      $this->start_doc_id = $val;
      return $this;
    }
    public function clearStartDocId() {
      unset($this->start_doc_id);
      return $this;
    }
    public function hasStartDocId() {
      return isset($this->start_doc_id);
    }
    public function getIncludeStartDoc() {
      if (!isset($this->include_start_doc)) {
        return true;
      }
      return $this->include_start_doc;
    }
    public function setIncludeStartDoc($val) {
      $this->include_start_doc = $val;
      return $this;
    }
    public function clearIncludeStartDoc() {
      unset($this->include_start_doc);
      return $this;
    }
    public function hasIncludeStartDoc() {
      return isset($this->include_start_doc);
    }
    public function getLimit() {
      if (!isset($this->limit)) {
        return 100;
      }
      return $this->limit;
    }
    public function setLimit($val) {
      $this->limit = $val;
      return $this;
    }
    public function clearLimit() {
      unset($this->limit);
      return $this;
    }
    public function hasLimit() {
      return isset($this->limit);
    }
    public function getKeysOnly() {
      if (!isset($this->keys_only)) {
        return false;
      }
      return $this->keys_only;
    }
    public function setKeysOnly($val) {
      $this->keys_only = $val;
      return $this;
    }
    public function clearKeysOnly() {
      unset($this->keys_only);
      return $this;
    }
    public function hasKeysOnly() {
      return isset($this->keys_only);
    }
    public function clear() {
      $this->clearIndexSpec();
      $this->clearStartDocId();
      $this->clearIncludeStartDoc();
      $this->clearLimit();
      $this->clearKeysOnly();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->index_spec)) {
        $res += 1;
        $res += $this->lengthString($this->index_spec->byteSizePartial());
      }
      if (isset($this->start_doc_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->start_doc_id));
      }
      if (isset($this->include_start_doc)) {
        $res += 2;
      }
      if (isset($this->limit)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->limit);
      }
      if (isset($this->keys_only)) {
        $res += 2;
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->index_spec)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->index_spec->byteSizePartial());
        $this->index_spec->outputPartial($out);
      }
      if (isset($this->start_doc_id)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->start_doc_id);
      }
      if (isset($this->include_start_doc)) {
        $out->putVarInt32(24);
        $out->putBoolean($this->include_start_doc);
      }
      if (isset($this->limit)) {
        $out->putVarInt32(32);
        $out->putVarInt32($this->limit);
      }
      if (isset($this->keys_only)) {
        $out->putVarInt32(40);
        $out->putBoolean($this->keys_only);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableIndexSpec()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setStartDocId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 24:
            $this->setIncludeStartDoc($d->getBoolean());
            break;
          case 32:
            $this->setLimit($d->getVarInt32());
            break;
          case 40:
            $this->setKeysOnly($d->getBoolean());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->index_spec)) || (!$this->index_spec->isInitialized())) return 'index_spec';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasIndexSpec()) {
        $this->mutableIndexSpec()->mergeFrom($x->getIndexSpec());
      }
      if ($x->hasStartDocId()) {
        $this->setStartDocId($x->getStartDocId());
      }
      if ($x->hasIncludeStartDoc()) {
        $this->setIncludeStartDoc($x->getIncludeStartDoc());
      }
      if ($x->hasLimit()) {
        $this->setLimit($x->getLimit());
      }
      if ($x->hasKeysOnly()) {
        $this->setKeysOnly($x->getKeysOnly());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->index_spec) !== isset($x->index_spec)) return false;
      if (isset($this->index_spec) && !$this->index_spec->equals($x->index_spec)) return false;
      if (isset($this->start_doc_id) !== isset($x->start_doc_id)) return false;
      if (isset($this->start_doc_id) && $this->start_doc_id !== $x->start_doc_id) return false;
      if (isset($this->include_start_doc) !== isset($x->include_start_doc)) return false;
      if (isset($this->include_start_doc) && $this->include_start_doc !== $x->include_start_doc) return false;
      if (isset($this->limit) !== isset($x->limit)) return false;
      if (isset($this->limit) && !$this->integerEquals($this->limit, $x->limit)) return false;
      if (isset($this->keys_only) !== isset($x->keys_only)) return false;
      if (isset($this->keys_only) && $this->keys_only !== $x->keys_only) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->index_spec)) {
        $res .= $prefix . "index_spec <\n" . $this->index_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->start_doc_id)) {
        $res .= $prefix . "start_doc_id: " . $this->debugFormatString($this->start_doc_id) . "\n";
      }
      if (isset($this->include_start_doc)) {
        $res .= $prefix . "include_start_doc: " . $this->debugFormatBool($this->include_start_doc) . "\n";
      }
      if (isset($this->limit)) {
        $res .= $prefix . "limit: " . $this->debugFormatInt32($this->limit) . "\n";
      }
      if (isset($this->keys_only)) {
        $res .= $prefix . "keys_only: " . $this->debugFormatBool($this->keys_only) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class ListDocumentsRequest extends \google\net\ProtocolMessage {
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\ListDocumentsParams();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\ListDocumentsParams();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function getAppId() {
      if (!isset($this->app_id)) {
        return '';
      }
      return $this->app_id;
    }
    public function setAppId($val) {
      $this->app_id = $val;
      return $this;
    }
    public function clearAppId() {
      unset($this->app_id);
      return $this;
    }
    public function hasAppId() {
      return isset($this->app_id);
    }
    public function clear() {
      $this->clearParams();
      $this->clearAppId();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      if (isset($this->app_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->app_id));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->params)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
      if (isset($this->app_id)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->app_id);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setAppId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->params)) || (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
      if ($x->hasAppId()) {
        $this->setAppId($x->getAppId());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      if (isset($this->app_id) !== isset($x->app_id)) return false;
      if (isset($this->app_id) && $this->app_id !== $x->app_id) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->app_id)) {
        $res .= $prefix . "app_id: " . $this->debugFormatString($this->app_id) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class ListDocumentsResponse extends \google\net\ProtocolMessage {
    private $document = array();
    public function getStatus() {
      if (!isset($this->status)) {
        return new \google\appengine\RequestStatus();
      }
      return $this->status;
    }
    public function mutableStatus() {
      if (!isset($this->status)) {
        $res = new \google\appengine\RequestStatus();
        $this->status = $res;
        return $res;
      }
      return $this->status;
    }
    public function clearStatus() {
      if (isset($this->status)) {
        unset($this->status);
      }
    }
    public function hasStatus() {
      return isset($this->status);
    }
    public function getDocumentSize() {
      return sizeof($this->document);
    }
    public function getDocumentList() {
      return $this->document;
    }
    public function mutableDocument($idx) {
      if (!isset($this->document[$idx])) {
        $val = new \storage_onestore_v3\Document();
        $this->document[$idx] = $val;
        return $val;
      }
      return $this->document[$idx];
    }
    public function getDocument($idx) {
      if (isset($this->document[$idx])) {
        return $this->document[$idx];
      }
      if ($idx >= end(array_keys($this->document))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \storage_onestore_v3\Document();
    }
    public function addDocument() {
      $val = new \storage_onestore_v3\Document();
      $this->document[] = $val;
      return $val;
    }
    public function clearDocument() {
      $this->document = array();
    }
    public function clear() {
      $this->clearStatus();
      $this->clearDocument();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->status)) {
        $res += 1;
        $res += $this->lengthString($this->status->byteSizePartial());
      }
      $this->checkProtoArray($this->document);
      $res += 1 * sizeof($this->document);
      foreach ($this->document as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->status)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->status->byteSizePartial());
        $this->status->outputPartial($out);
      }
      $this->checkProtoArray($this->document);
      foreach ($this->document as $value) {
        $out->putVarInt32(18);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableStatus()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addDocument()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->status)) || (!$this->status->isInitialized())) return 'status';
      foreach ($this->document as $value) {
        if (!$value->isInitialized()) return 'document';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasStatus()) {
        $this->mutableStatus()->mergeFrom($x->getStatus());
      }
      foreach ($x->getDocumentList() as $v) {
        $this->addDocument()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->status) !== isset($x->status)) return false;
      if (isset($this->status) && !$this->status->equals($x->status)) return false;
      if (sizeof($this->document) !== sizeof($x->document)) return false;
      foreach (array_map(null, $this->document, $x->document) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->status)) {
        $res .= $prefix . "status <\n" . $this->status->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      foreach ($this->document as $value) {
        $res .= $prefix . "document <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteIndexParams extends \google\net\ProtocolMessage {
    public function getIndexSpec() {
      if (!isset($this->index_spec)) {
        return new \google\appengine\IndexSpec();
      }
      return $this->index_spec;
    }
    public function mutableIndexSpec() {
      if (!isset($this->index_spec)) {
        $res = new \google\appengine\IndexSpec();
        $this->index_spec = $res;
        return $res;
      }
      return $this->index_spec;
    }
    public function clearIndexSpec() {
      if (isset($this->index_spec)) {
        unset($this->index_spec);
      }
    }
    public function hasIndexSpec() {
      return isset($this->index_spec);
    }
    public function clear() {
      $this->clearIndexSpec();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->index_spec)) {
        $res += 1;
        $res += $this->lengthString($this->index_spec->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->index_spec)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->index_spec->byteSizePartial());
        $this->index_spec->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableIndexSpec()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->index_spec)) || (!$this->index_spec->isInitialized())) return 'index_spec';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasIndexSpec()) {
        $this->mutableIndexSpec()->mergeFrom($x->getIndexSpec());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->index_spec) !== isset($x->index_spec)) return false;
      if (isset($this->index_spec) && !$this->index_spec->equals($x->index_spec)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->index_spec)) {
        $res .= $prefix . "index_spec <\n" . $this->index_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteIndexRequest extends \google\net\ProtocolMessage {
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\DeleteIndexParams();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\DeleteIndexParams();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function getAppId() {
      if (!isset($this->app_id)) {
        return '';
      }
      return $this->app_id;
    }
    public function setAppId($val) {
      $this->app_id = $val;
      return $this;
    }
    public function clearAppId() {
      unset($this->app_id);
      return $this;
    }
    public function hasAppId() {
      return isset($this->app_id);
    }
    public function clear() {
      $this->clearParams();
      $this->clearAppId();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      if (isset($this->app_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->app_id));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->params)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
      if (isset($this->app_id)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->app_id);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setAppId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->params)) || (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
      if ($x->hasAppId()) {
        $this->setAppId($x->getAppId());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      if (isset($this->app_id) !== isset($x->app_id)) return false;
      if (isset($this->app_id) && $this->app_id !== $x->app_id) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->app_id)) {
        $res .= $prefix . "app_id: " . $this->debugFormatString($this->app_id) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteIndexResponse extends \google\net\ProtocolMessage {
    public function getStatus() {
      if (!isset($this->status)) {
        return new \google\appengine\RequestStatus();
      }
      return $this->status;
    }
    public function mutableStatus() {
      if (!isset($this->status)) {
        $res = new \google\appengine\RequestStatus();
        $this->status = $res;
        return $res;
      }
      return $this->status;
    }
    public function clearStatus() {
      if (isset($this->status)) {
        unset($this->status);
      }
    }
    public function hasStatus() {
      return isset($this->status);
    }
    public function clear() {
      $this->clearStatus();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->status)) {
        $res += 1;
        $res += $this->lengthString($this->status->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->status)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->status->byteSizePartial());
        $this->status->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableStatus()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->status)) || (!$this->status->isInitialized())) return 'status';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasStatus()) {
        $this->mutableStatus()->mergeFrom($x->getStatus());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->status) !== isset($x->status)) return false;
      if (isset($this->status) && !$this->status->equals($x->status)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->status)) {
        $res .= $prefix . "status <\n" . $this->status->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class CancelDeleteIndexParams extends \google\net\ProtocolMessage {
    public function getIndexSpec() {
      if (!isset($this->index_spec)) {
        return new \google\appengine\IndexSpec();
      }
      return $this->index_spec;
    }
    public function mutableIndexSpec() {
      if (!isset($this->index_spec)) {
        $res = new \google\appengine\IndexSpec();
        $this->index_spec = $res;
        return $res;
      }
      return $this->index_spec;
    }
    public function clearIndexSpec() {
      if (isset($this->index_spec)) {
        unset($this->index_spec);
      }
    }
    public function hasIndexSpec() {
      return isset($this->index_spec);
    }
    public function clear() {
      $this->clearIndexSpec();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->index_spec)) {
        $res += 1;
        $res += $this->lengthString($this->index_spec->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->index_spec)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->index_spec->byteSizePartial());
        $this->index_spec->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableIndexSpec()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->index_spec)) || (!$this->index_spec->isInitialized())) return 'index_spec';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasIndexSpec()) {
        $this->mutableIndexSpec()->mergeFrom($x->getIndexSpec());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->index_spec) !== isset($x->index_spec)) return false;
      if (isset($this->index_spec) && !$this->index_spec->equals($x->index_spec)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->index_spec)) {
        $res .= $prefix . "index_spec <\n" . $this->index_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class CancelDeleteIndexRequest extends \google\net\ProtocolMessage {
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\CancelDeleteIndexParams();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\CancelDeleteIndexParams();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function getAppId() {
      if (!isset($this->app_id)) {
        return '';
      }
      return $this->app_id;
    }
    public function setAppId($val) {
      $this->app_id = $val;
      return $this;
    }
    public function clearAppId() {
      unset($this->app_id);
      return $this;
    }
    public function hasAppId() {
      return isset($this->app_id);
    }
    public function clear() {
      $this->clearParams();
      $this->clearAppId();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      if (isset($this->app_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->app_id));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->params)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
      if (isset($this->app_id)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->app_id);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setAppId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->params)) || (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
      if ($x->hasAppId()) {
        $this->setAppId($x->getAppId());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      if (isset($this->app_id) !== isset($x->app_id)) return false;
      if (isset($this->app_id) && $this->app_id !== $x->app_id) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->app_id)) {
        $res .= $prefix . "app_id: " . $this->debugFormatString($this->app_id) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class CancelDeleteIndexResponse extends \google\net\ProtocolMessage {
    public function getStatus() {
      if (!isset($this->status)) {
        return new \google\appengine\RequestStatus();
      }
      return $this->status;
    }
    public function mutableStatus() {
      if (!isset($this->status)) {
        $res = new \google\appengine\RequestStatus();
        $this->status = $res;
        return $res;
      }
      return $this->status;
    }
    public function clearStatus() {
      if (isset($this->status)) {
        unset($this->status);
      }
    }
    public function hasStatus() {
      return isset($this->status);
    }
    public function clear() {
      $this->clearStatus();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->status)) {
        $res += 1;
        $res += $this->lengthString($this->status->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->status)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->status->byteSizePartial());
        $this->status->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableStatus()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->status)) || (!$this->status->isInitialized())) return 'status';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasStatus()) {
        $this->mutableStatus()->mergeFrom($x->getStatus());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->status) !== isset($x->status)) return false;
      if (isset($this->status) && !$this->status->equals($x->status)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->status)) {
        $res .= $prefix . "status <\n" . $this->status->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class ListIndexesParams extends \google\net\ProtocolMessage {
    public function getFetchSchema() {
      if (!isset($this->fetch_schema)) {
        return false;
      }
      return $this->fetch_schema;
    }
    public function setFetchSchema($val) {
      $this->fetch_schema = $val;
      return $this;
    }
    public function clearFetchSchema() {
      unset($this->fetch_schema);
      return $this;
    }
    public function hasFetchSchema() {
      return isset($this->fetch_schema);
    }
    public function getLimit() {
      if (!isset($this->limit)) {
        return 20;
      }
      return $this->limit;
    }
    public function setLimit($val) {
      $this->limit = $val;
      return $this;
    }
    public function clearLimit() {
      unset($this->limit);
      return $this;
    }
    public function hasLimit() {
      return isset($this->limit);
    }
    public function getNamespace() {
      if (!isset($this->namespace)) {
        return '';
      }
      return $this->namespace;
    }
    public function setNamespace($val) {
      $this->namespace = $val;
      return $this;
    }
    public function clearNamespace() {
      unset($this->namespace);
      return $this;
    }
    public function hasNamespace() {
      return isset($this->namespace);
    }
    public function getStartIndexName() {
      if (!isset($this->start_index_name)) {
        return '';
      }
      return $this->start_index_name;
    }
    public function setStartIndexName($val) {
      $this->start_index_name = $val;
      return $this;
    }
    public function clearStartIndexName() {
      unset($this->start_index_name);
      return $this;
    }
    public function hasStartIndexName() {
      return isset($this->start_index_name);
    }
    public function getIncludeStartIndex() {
      if (!isset($this->include_start_index)) {
        return true;
      }
      return $this->include_start_index;
    }
    public function setIncludeStartIndex($val) {
      $this->include_start_index = $val;
      return $this;
    }
    public function clearIncludeStartIndex() {
      unset($this->include_start_index);
      return $this;
    }
    public function hasIncludeStartIndex() {
      return isset($this->include_start_index);
    }
    public function getIndexNamePrefix() {
      if (!isset($this->index_name_prefix)) {
        return '';
      }
      return $this->index_name_prefix;
    }
    public function setIndexNamePrefix($val) {
      $this->index_name_prefix = $val;
      return $this;
    }
    public function clearIndexNamePrefix() {
      unset($this->index_name_prefix);
      return $this;
    }
    public function hasIndexNamePrefix() {
      return isset($this->index_name_prefix);
    }
    public function getOffset() {
      if (!isset($this->offset)) {
        return 0;
      }
      return $this->offset;
    }
    public function setOffset($val) {
      $this->offset = $val;
      return $this;
    }
    public function clearOffset() {
      unset($this->offset);
      return $this;
    }
    public function hasOffset() {
      return isset($this->offset);
    }
    public function getSource() {
      if (!isset($this->source)) {
        return 0;
      }
      return $this->source;
    }
    public function setSource($val) {
      $this->source = $val;
      return $this;
    }
    public function clearSource() {
      unset($this->source);
      return $this;
    }
    public function hasSource() {
      return isset($this->source);
    }
    public function clear() {
      $this->clearFetchSchema();
      $this->clearLimit();
      $this->clearNamespace();
      $this->clearStartIndexName();
      $this->clearIncludeStartIndex();
      $this->clearIndexNamePrefix();
      $this->clearOffset();
      $this->clearSource();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->fetch_schema)) {
        $res += 2;
      }
      if (isset($this->limit)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->limit);
      }
      if (isset($this->namespace)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->namespace));
      }
      if (isset($this->start_index_name)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->start_index_name));
      }
      if (isset($this->include_start_index)) {
        $res += 2;
      }
      if (isset($this->index_name_prefix)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->index_name_prefix));
      }
      if (isset($this->offset)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->offset);
      }
      if (isset($this->source)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->source);
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->fetch_schema)) {
        $out->putVarInt32(8);
        $out->putBoolean($this->fetch_schema);
      }
      if (isset($this->limit)) {
        $out->putVarInt32(16);
        $out->putVarInt32($this->limit);
      }
      if (isset($this->namespace)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->namespace);
      }
      if (isset($this->start_index_name)) {
        $out->putVarInt32(34);
        $out->putPrefixedString($this->start_index_name);
      }
      if (isset($this->include_start_index)) {
        $out->putVarInt32(40);
        $out->putBoolean($this->include_start_index);
      }
      if (isset($this->index_name_prefix)) {
        $out->putVarInt32(50);
        $out->putPrefixedString($this->index_name_prefix);
      }
      if (isset($this->offset)) {
        $out->putVarInt32(56);
        $out->putVarInt32($this->offset);
      }
      if (isset($this->source)) {
        $out->putVarInt32(64);
        $out->putVarInt32($this->source);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 8:
            $this->setFetchSchema($d->getBoolean());
            break;
          case 16:
            $this->setLimit($d->getVarInt32());
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setNamespace(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 34:
            $length = $d->getVarInt32();
            $this->setStartIndexName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 40:
            $this->setIncludeStartIndex($d->getBoolean());
            break;
          case 50:
            $length = $d->getVarInt32();
            $this->setIndexNamePrefix(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 56:
            $this->setOffset($d->getVarInt32());
            break;
          case 64:
            $this->setSource($d->getVarInt32());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasFetchSchema()) {
        $this->setFetchSchema($x->getFetchSchema());
      }
      if ($x->hasLimit()) {
        $this->setLimit($x->getLimit());
      }
      if ($x->hasNamespace()) {
        $this->setNamespace($x->getNamespace());
      }
      if ($x->hasStartIndexName()) {
        $this->setStartIndexName($x->getStartIndexName());
      }
      if ($x->hasIncludeStartIndex()) {
        $this->setIncludeStartIndex($x->getIncludeStartIndex());
      }
      if ($x->hasIndexNamePrefix()) {
        $this->setIndexNamePrefix($x->getIndexNamePrefix());
      }
      if ($x->hasOffset()) {
        $this->setOffset($x->getOffset());
      }
      if ($x->hasSource()) {
        $this->setSource($x->getSource());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->fetch_schema) !== isset($x->fetch_schema)) return false;
      if (isset($this->fetch_schema) && $this->fetch_schema !== $x->fetch_schema) return false;
      if (isset($this->limit) !== isset($x->limit)) return false;
      if (isset($this->limit) && !$this->integerEquals($this->limit, $x->limit)) return false;
      if (isset($this->namespace) !== isset($x->namespace)) return false;
      if (isset($this->namespace) && $this->namespace !== $x->namespace) return false;
      if (isset($this->start_index_name) !== isset($x->start_index_name)) return false;
      if (isset($this->start_index_name) && $this->start_index_name !== $x->start_index_name) return false;
      if (isset($this->include_start_index) !== isset($x->include_start_index)) return false;
      if (isset($this->include_start_index) && $this->include_start_index !== $x->include_start_index) return false;
      if (isset($this->index_name_prefix) !== isset($x->index_name_prefix)) return false;
      if (isset($this->index_name_prefix) && $this->index_name_prefix !== $x->index_name_prefix) return false;
      if (isset($this->offset) !== isset($x->offset)) return false;
      if (isset($this->offset) && !$this->integerEquals($this->offset, $x->offset)) return false;
      if (isset($this->source) !== isset($x->source)) return false;
      if (isset($this->source) && $this->source !== $x->source) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->fetch_schema)) {
        $res .= $prefix . "fetch_schema: " . $this->debugFormatBool($this->fetch_schema) . "\n";
      }
      if (isset($this->limit)) {
        $res .= $prefix . "limit: " . $this->debugFormatInt32($this->limit) . "\n";
      }
      if (isset($this->namespace)) {
        $res .= $prefix . "namespace: " . $this->debugFormatString($this->namespace) . "\n";
      }
      if (isset($this->start_index_name)) {
        $res .= $prefix . "start_index_name: " . $this->debugFormatString($this->start_index_name) . "\n";
      }
      if (isset($this->include_start_index)) {
        $res .= $prefix . "include_start_index: " . $this->debugFormatBool($this->include_start_index) . "\n";
      }
      if (isset($this->index_name_prefix)) {
        $res .= $prefix . "index_name_prefix: " . $this->debugFormatString($this->index_name_prefix) . "\n";
      }
      if (isset($this->offset)) {
        $res .= $prefix . "offset: " . $this->debugFormatInt32($this->offset) . "\n";
      }
      if (isset($this->source)) {
        $res .= $prefix . "source: " . ($this->source) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class ListIndexesRequest extends \google\net\ProtocolMessage {
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\ListIndexesParams();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\ListIndexesParams();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function getAppId() {
      if (!isset($this->app_id)) {
        return '';
      }
      return $this->app_id;
    }
    public function setAppId($val) {
      $this->app_id = $val;
      return $this;
    }
    public function clearAppId() {
      unset($this->app_id);
      return $this;
    }
    public function hasAppId() {
      return isset($this->app_id);
    }
    public function clear() {
      $this->clearParams();
      $this->clearAppId();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      if (isset($this->app_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->app_id));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->params)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
      if (isset($this->app_id)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->app_id);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setAppId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->params)) || (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
      if ($x->hasAppId()) {
        $this->setAppId($x->getAppId());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      if (isset($this->app_id) !== isset($x->app_id)) return false;
      if (isset($this->app_id) && $this->app_id !== $x->app_id) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->app_id)) {
        $res .= $prefix . "app_id: " . $this->debugFormatString($this->app_id) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class ListIndexesResponse extends \google\net\ProtocolMessage {
    private $index_metadata = array();
    public function getStatus() {
      if (!isset($this->status)) {
        return new \google\appengine\RequestStatus();
      }
      return $this->status;
    }
    public function mutableStatus() {
      if (!isset($this->status)) {
        $res = new \google\appengine\RequestStatus();
        $this->status = $res;
        return $res;
      }
      return $this->status;
    }
    public function clearStatus() {
      if (isset($this->status)) {
        unset($this->status);
      }
    }
    public function hasStatus() {
      return isset($this->status);
    }
    public function getIndexMetadataSize() {
      return sizeof($this->index_metadata);
    }
    public function getIndexMetadataList() {
      return $this->index_metadata;
    }
    public function mutableIndexMetadata($idx) {
      if (!isset($this->index_metadata[$idx])) {
        $val = new \google\appengine\IndexMetadata();
        $this->index_metadata[$idx] = $val;
        return $val;
      }
      return $this->index_metadata[$idx];
    }
    public function getIndexMetadata($idx) {
      if (isset($this->index_metadata[$idx])) {
        return $this->index_metadata[$idx];
      }
      if ($idx >= end(array_keys($this->index_metadata))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\IndexMetadata();
    }
    public function addIndexMetadata() {
      $val = new \google\appengine\IndexMetadata();
      $this->index_metadata[] = $val;
      return $val;
    }
    public function clearIndexMetadata() {
      $this->index_metadata = array();
    }
    public function clear() {
      $this->clearStatus();
      $this->clearIndexMetadata();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->status)) {
        $res += 1;
        $res += $this->lengthString($this->status->byteSizePartial());
      }
      $this->checkProtoArray($this->index_metadata);
      $res += 1 * sizeof($this->index_metadata);
      foreach ($this->index_metadata as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->status)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->status->byteSizePartial());
        $this->status->outputPartial($out);
      }
      $this->checkProtoArray($this->index_metadata);
      foreach ($this->index_metadata as $value) {
        $out->putVarInt32(18);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableStatus()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addIndexMetadata()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->status)) || (!$this->status->isInitialized())) return 'status';
      foreach ($this->index_metadata as $value) {
        if (!$value->isInitialized()) return 'index_metadata';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasStatus()) {
        $this->mutableStatus()->mergeFrom($x->getStatus());
      }
      foreach ($x->getIndexMetadataList() as $v) {
        $this->addIndexMetadata()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->status) !== isset($x->status)) return false;
      if (isset($this->status) && !$this->status->equals($x->status)) return false;
      if (sizeof($this->index_metadata) !== sizeof($x->index_metadata)) return false;
      foreach (array_map(null, $this->index_metadata, $x->index_metadata) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->status)) {
        $res .= $prefix . "status <\n" . $this->status->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      foreach ($this->index_metadata as $value) {
        $res .= $prefix . "index_metadata <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteSchemaParams extends \google\net\ProtocolMessage {
    private $index_spec = array();
    public function getSource() {
      if (!isset($this->source)) {
        return 0;
      }
      return $this->source;
    }
    public function setSource($val) {
      $this->source = $val;
      return $this;
    }
    public function clearSource() {
      unset($this->source);
      return $this;
    }
    public function hasSource() {
      return isset($this->source);
    }
    public function getIndexSpecSize() {
      return sizeof($this->index_spec);
    }
    public function getIndexSpecList() {
      return $this->index_spec;
    }
    public function mutableIndexSpec($idx) {
      if (!isset($this->index_spec[$idx])) {
        $val = new \google\appengine\IndexSpec();
        $this->index_spec[$idx] = $val;
        return $val;
      }
      return $this->index_spec[$idx];
    }
    public function getIndexSpec($idx) {
      if (isset($this->index_spec[$idx])) {
        return $this->index_spec[$idx];
      }
      if ($idx >= end(array_keys($this->index_spec))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\IndexSpec();
    }
    public function addIndexSpec() {
      $val = new \google\appengine\IndexSpec();
      $this->index_spec[] = $val;
      return $val;
    }
    public function clearIndexSpec() {
      $this->index_spec = array();
    }
    public function clear() {
      $this->clearSource();
      $this->clearIndexSpec();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->source)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->source);
      }
      $this->checkProtoArray($this->index_spec);
      $res += 1 * sizeof($this->index_spec);
      foreach ($this->index_spec as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->source)) {
        $out->putVarInt32(8);
        $out->putVarInt32($this->source);
      }
      $this->checkProtoArray($this->index_spec);
      foreach ($this->index_spec as $value) {
        $out->putVarInt32(18);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 8:
            $this->setSource($d->getVarInt32());
            break;
          case 18:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addIndexSpec()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      foreach ($this->index_spec as $value) {
        if (!$value->isInitialized()) return 'index_spec';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasSource()) {
        $this->setSource($x->getSource());
      }
      foreach ($x->getIndexSpecList() as $v) {
        $this->addIndexSpec()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->source) !== isset($x->source)) return false;
      if (isset($this->source) && $this->source !== $x->source) return false;
      if (sizeof($this->index_spec) !== sizeof($x->index_spec)) return false;
      foreach (array_map(null, $this->index_spec, $x->index_spec) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->source)) {
        $res .= $prefix . "source: " . ($this->source) . "\n";
      }
      foreach ($this->index_spec as $value) {
        $res .= $prefix . "index_spec <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteSchemaRequest extends \google\net\ProtocolMessage {
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\DeleteSchemaParams();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\DeleteSchemaParams();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function getAppId() {
      if (!isset($this->app_id)) {
        return '';
      }
      return $this->app_id;
    }
    public function setAppId($val) {
      $this->app_id = $val;
      return $this;
    }
    public function clearAppId() {
      unset($this->app_id);
      return $this;
    }
    public function hasAppId() {
      return isset($this->app_id);
    }
    public function clear() {
      $this->clearParams();
      $this->clearAppId();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      if (isset($this->app_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->app_id));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->params)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
      if (isset($this->app_id)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->app_id);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setAppId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->params)) || (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
      if ($x->hasAppId()) {
        $this->setAppId($x->getAppId());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      if (isset($this->app_id) !== isset($x->app_id)) return false;
      if (isset($this->app_id) && $this->app_id !== $x->app_id) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->app_id)) {
        $res .= $prefix . "app_id: " . $this->debugFormatString($this->app_id) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class DeleteSchemaResponse extends \google\net\ProtocolMessage {
    private $status = array();
    public function getStatusSize() {
      return sizeof($this->status);
    }
    public function getStatusList() {
      return $this->status;
    }
    public function mutableStatus($idx) {
      if (!isset($this->status[$idx])) {
        $val = new \google\appengine\RequestStatus();
        $this->status[$idx] = $val;
        return $val;
      }
      return $this->status[$idx];
    }
    public function getStatus($idx) {
      if (isset($this->status[$idx])) {
        return $this->status[$idx];
      }
      if ($idx >= end(array_keys($this->status))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\RequestStatus();
    }
    public function addStatus() {
      $val = new \google\appengine\RequestStatus();
      $this->status[] = $val;
      return $val;
    }
    public function clearStatus() {
      $this->status = array();
    }
    public function clear() {
      $this->clearStatus();
    }
    public function byteSizePartial() {
      $res = 0;
      $this->checkProtoArray($this->status);
      $res += 1 * sizeof($this->status);
      foreach ($this->status as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      $this->checkProtoArray($this->status);
      foreach ($this->status as $value) {
        $out->putVarInt32(10);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addStatus()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      foreach ($this->status as $value) {
        if (!$value->isInitialized()) return 'status';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      foreach ($x->getStatusList() as $v) {
        $this->addStatus()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (sizeof($this->status) !== sizeof($x->status)) return false;
      foreach (array_map(null, $this->status, $x->status) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      foreach ($this->status as $value) {
        $res .= $prefix . "status <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class SortSpec extends \google\net\ProtocolMessage {
    public function getSortExpression() {
      if (!isset($this->sort_expression)) {
        return '';
      }
      return $this->sort_expression;
    }
    public function setSortExpression($val) {
      $this->sort_expression = $val;
      return $this;
    }
    public function clearSortExpression() {
      unset($this->sort_expression);
      return $this;
    }
    public function hasSortExpression() {
      return isset($this->sort_expression);
    }
    public function getSortDescending() {
      if (!isset($this->sort_descending)) {
        return true;
      }
      return $this->sort_descending;
    }
    public function setSortDescending($val) {
      $this->sort_descending = $val;
      return $this;
    }
    public function clearSortDescending() {
      unset($this->sort_descending);
      return $this;
    }
    public function hasSortDescending() {
      return isset($this->sort_descending);
    }
    public function getDefaultValueText() {
      if (!isset($this->default_value_text)) {
        return '';
      }
      return $this->default_value_text;
    }
    public function setDefaultValueText($val) {
      $this->default_value_text = $val;
      return $this;
    }
    public function clearDefaultValueText() {
      unset($this->default_value_text);
      return $this;
    }
    public function hasDefaultValueText() {
      return isset($this->default_value_text);
    }
    public function getDefaultValueNumeric() {
      if (!isset($this->default_value_numeric)) {
        return 0.0;
      }
      return $this->default_value_numeric;
    }
    public function setDefaultValueNumeric($val) {
      $this->default_value_numeric = $val;
      return $this;
    }
    public function clearDefaultValueNumeric() {
      unset($this->default_value_numeric);
      return $this;
    }
    public function hasDefaultValueNumeric() {
      return isset($this->default_value_numeric);
    }
    public function clear() {
      $this->clearSortExpression();
      $this->clearSortDescending();
      $this->clearDefaultValueText();
      $this->clearDefaultValueNumeric();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->sort_expression)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->sort_expression));
      }
      if (isset($this->sort_descending)) {
        $res += 2;
      }
      if (isset($this->default_value_text)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->default_value_text));
      }
      if (isset($this->default_value_numeric)) {
        $res += 9;
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->sort_expression)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->sort_expression);
      }
      if (isset($this->sort_descending)) {
        $out->putVarInt32(16);
        $out->putBoolean($this->sort_descending);
      }
      if (isset($this->default_value_text)) {
        $out->putVarInt32(34);
        $out->putPrefixedString($this->default_value_text);
      }
      if (isset($this->default_value_numeric)) {
        $out->putVarInt32(41);
        $out->putDouble($this->default_value_numeric);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setSortExpression(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 16:
            $this->setSortDescending($d->getBoolean());
            break;
          case 34:
            $length = $d->getVarInt32();
            $this->setDefaultValueText(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 41:
            $this->setDefaultValueNumeric($d->getDouble());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->sort_expression)) return 'sort_expression';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasSortExpression()) {
        $this->setSortExpression($x->getSortExpression());
      }
      if ($x->hasSortDescending()) {
        $this->setSortDescending($x->getSortDescending());
      }
      if ($x->hasDefaultValueText()) {
        $this->setDefaultValueText($x->getDefaultValueText());
      }
      if ($x->hasDefaultValueNumeric()) {
        $this->setDefaultValueNumeric($x->getDefaultValueNumeric());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->sort_expression) !== isset($x->sort_expression)) return false;
      if (isset($this->sort_expression) && $this->sort_expression !== $x->sort_expression) return false;
      if (isset($this->sort_descending) !== isset($x->sort_descending)) return false;
      if (isset($this->sort_descending) && $this->sort_descending !== $x->sort_descending) return false;
      if (isset($this->default_value_text) !== isset($x->default_value_text)) return false;
      if (isset($this->default_value_text) && $this->default_value_text !== $x->default_value_text) return false;
      if (isset($this->default_value_numeric) !== isset($x->default_value_numeric)) return false;
      if (isset($this->default_value_numeric) && $this->default_value_numeric !== $x->default_value_numeric) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->sort_expression)) {
        $res .= $prefix . "sort_expression: " . $this->debugFormatString($this->sort_expression) . "\n";
      }
      if (isset($this->sort_descending)) {
        $res .= $prefix . "sort_descending: " . $this->debugFormatBool($this->sort_descending) . "\n";
      }
      if (isset($this->default_value_text)) {
        $res .= $prefix . "default_value_text: " . $this->debugFormatString($this->default_value_text) . "\n";
      }
      if (isset($this->default_value_numeric)) {
        $res .= $prefix . "default_value_numeric: " . $this->debugFormatDouble($this->default_value_numeric) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine\ScorerSpec {
  class Scorer {
    const RESCORING_MATCH_SCORER = 0;
    const MATCH_SCORER = 2;
  }
}
namespace google\appengine {
  class ScorerSpec extends \google\net\ProtocolMessage {
    public function getScorer() {
      if (!isset($this->scorer)) {
        return 2;
      }
      return $this->scorer;
    }
    public function setScorer($val) {
      $this->scorer = $val;
      return $this;
    }
    public function clearScorer() {
      unset($this->scorer);
      return $this;
    }
    public function hasScorer() {
      return isset($this->scorer);
    }
    public function getLimit() {
      if (!isset($this->limit)) {
        return 1000;
      }
      return $this->limit;
    }
    public function setLimit($val) {
      $this->limit = $val;
      return $this;
    }
    public function clearLimit() {
      unset($this->limit);
      return $this;
    }
    public function hasLimit() {
      return isset($this->limit);
    }
    public function getMatchScorerParameters() {
      if (!isset($this->match_scorer_parameters)) {
        return '';
      }
      return $this->match_scorer_parameters;
    }
    public function setMatchScorerParameters($val) {
      $this->match_scorer_parameters = $val;
      return $this;
    }
    public function clearMatchScorerParameters() {
      unset($this->match_scorer_parameters);
      return $this;
    }
    public function hasMatchScorerParameters() {
      return isset($this->match_scorer_parameters);
    }
    public function clear() {
      $this->clearScorer();
      $this->clearLimit();
      $this->clearMatchScorerParameters();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->scorer)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->scorer);
      }
      if (isset($this->limit)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->limit);
      }
      if (isset($this->match_scorer_parameters)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->match_scorer_parameters));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->scorer)) {
        $out->putVarInt32(8);
        $out->putVarInt32($this->scorer);
      }
      if (isset($this->limit)) {
        $out->putVarInt32(16);
        $out->putVarInt32($this->limit);
      }
      if (isset($this->match_scorer_parameters)) {
        $out->putVarInt32(74);
        $out->putPrefixedString($this->match_scorer_parameters);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 8:
            $this->setScorer($d->getVarInt32());
            break;
          case 16:
            $this->setLimit($d->getVarInt32());
            break;
          case 74:
            $length = $d->getVarInt32();
            $this->setMatchScorerParameters(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasScorer()) {
        $this->setScorer($x->getScorer());
      }
      if ($x->hasLimit()) {
        $this->setLimit($x->getLimit());
      }
      if ($x->hasMatchScorerParameters()) {
        $this->setMatchScorerParameters($x->getMatchScorerParameters());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->scorer) !== isset($x->scorer)) return false;
      if (isset($this->scorer) && $this->scorer !== $x->scorer) return false;
      if (isset($this->limit) !== isset($x->limit)) return false;
      if (isset($this->limit) && !$this->integerEquals($this->limit, $x->limit)) return false;
      if (isset($this->match_scorer_parameters) !== isset($x->match_scorer_parameters)) return false;
      if (isset($this->match_scorer_parameters) && $this->match_scorer_parameters !== $x->match_scorer_parameters) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->scorer)) {
        $res .= $prefix . "scorer: " . ($this->scorer) . "\n";
      }
      if (isset($this->limit)) {
        $res .= $prefix . "limit: " . $this->debugFormatInt32($this->limit) . "\n";
      }
      if (isset($this->match_scorer_parameters)) {
        $res .= $prefix . "match_scorer_parameters: " . $this->debugFormatString($this->match_scorer_parameters) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine\FieldSpec {
  class Expression extends \google\net\ProtocolMessage {
    public function getName() {
      if (!isset($this->name)) {
        return '';
      }
      return $this->name;
    }
    public function setName($val) {
      $this->name = $val;
      return $this;
    }
    public function clearName() {
      unset($this->name);
      return $this;
    }
    public function hasName() {
      return isset($this->name);
    }
    public function getExpression() {
      if (!isset($this->expression)) {
        return '';
      }
      return $this->expression;
    }
    public function setExpression($val) {
      $this->expression = $val;
      return $this;
    }
    public function clearExpression() {
      unset($this->expression);
      return $this;
    }
    public function hasExpression() {
      return isset($this->expression);
    }
    public function clear() {
      $this->clearName();
      $this->clearExpression();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->name)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->name));
      }
      if (isset($this->expression)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->expression));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->name)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->name);
      }
      if (isset($this->expression)) {
        $out->putVarInt32(34);
        $out->putPrefixedString($this->expression);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 20: return;
          case 26:
            $length = $d->getVarInt32();
            $this->setName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 34:
            $length = $d->getVarInt32();
            $this->setExpression(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->name)) return 'name';
      if (!isset($this->expression)) return 'expression';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasName()) {
        $this->setName($x->getName());
      }
      if ($x->hasExpression()) {
        $this->setExpression($x->getExpression());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->name) !== isset($x->name)) return false;
      if (isset($this->name) && $this->name !== $x->name) return false;
      if (isset($this->expression) !== isset($x->expression)) return false;
      if (isset($this->expression) && $this->expression !== $x->expression) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->name)) {
        $res .= $prefix . "name: " . $this->debugFormatString($this->name) . "\n";
      }
      if (isset($this->expression)) {
        $res .= $prefix . "expression: " . $this->debugFormatString($this->expression) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class FieldSpec extends \google\net\ProtocolMessage {
    private $name = array();
    private $expression = array();
    public function getNameSize() {
      return sizeof($this->name);
    }
    public function getNameList() {
      return $this->name;
    }
    public function getName($idx) {
      return $this->name[$idx];
    }
    public function setName($idx, $val) {
      $this->name[$idx] = $val;
      return $this;
    }
    public function addName($val) {
      $this->name[] = $val;
      return $this;
    }
    public function clearName() {
      $this->name = array();
    }
    public function getExpressionSize() {
      return sizeof($this->expression);
    }
    public function getExpressionList() {
      return $this->expression;
    }
    public function mutableExpression($idx) {
      if (!isset($this->expression[$idx])) {
        $val = new \google\appengine\FieldSpec\Expression();
        $this->expression[$idx] = $val;
        return $val;
      }
      return $this->expression[$idx];
    }
    public function getExpression($idx) {
      if (isset($this->expression[$idx])) {
        return $this->expression[$idx];
      }
      if ($idx >= end(array_keys($this->expression))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\FieldSpec\Expression();
    }
    public function addExpression() {
      $val = new \google\appengine\FieldSpec\Expression();
      $this->expression[] = $val;
      return $val;
    }
    public function clearExpression() {
      $this->expression = array();
    }
    public function clear() {
      $this->clearName();
      $this->clearExpression();
    }
    public function byteSizePartial() {
      $res = 0;
      $this->checkProtoArray($this->name);
      $res += 1 * sizeof($this->name);
      foreach ($this->name as $value) {
        $res += $this->lengthString(strlen($value));
      }
      $this->checkProtoArray($this->expression);
      $res += 2 * sizeof($this->expression);
      foreach ($this->expression as $value) {
        $res += $value->byteSizePartial();
      }
      return $res;
    }
    public function outputPartial($out) {
      $this->checkProtoArray($this->name);
      foreach ($this->name as $value) {
        $out->putVarInt32(10);
        $out->putPrefixedString($value);
      }
      $this->checkProtoArray($this->expression);
      foreach ($this->expression as $value) {
        $out->putVarInt32(19);
        $value->outputPartial($out);
        $out->putVarInt32(20);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->addName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 19:
            $this->addExpression()->tryMerge($d);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      foreach ($this->expression as $value) {
        if (!$value->isInitialized()) return 'expression';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      foreach ($x->getNameList() as $v) {
        $this->addName($v);
      }
      foreach ($x->getExpressionList() as $v) {
        $this->addExpression()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (sizeof($this->name) !== sizeof($x->name)) return false;
      foreach (array_map(null, $this->name, $x->name) as $v) {
        if ($v[0] !== $v[1]) return false;
      }
      if (sizeof($this->expression) !== sizeof($x->expression)) return false;
      foreach (array_map(null, $this->expression, $x->expression) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      foreach ($this->name as $value) {
        $res .= $prefix . "name: " . $this->debugFormatString($value) . "\n";
      }
      foreach ($this->expression as $value) {
        $res .= $prefix . "Expression {\n" . $value->shortDebugString($prefix . "  ") . $prefix . "}\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class FacetRange extends \google\net\ProtocolMessage {
    public function getName() {
      if (!isset($this->name)) {
        return '';
      }
      return $this->name;
    }
    public function setName($val) {
      $this->name = $val;
      return $this;
    }
    public function clearName() {
      unset($this->name);
      return $this;
    }
    public function hasName() {
      return isset($this->name);
    }
    public function getStart() {
      if (!isset($this->start)) {
        return '';
      }
      return $this->start;
    }
    public function setStart($val) {
      $this->start = $val;
      return $this;
    }
    public function clearStart() {
      unset($this->start);
      return $this;
    }
    public function hasStart() {
      return isset($this->start);
    }
    public function getEnd() {
      if (!isset($this->end)) {
        return '';
      }
      return $this->end;
    }
    public function setEnd($val) {
      $this->end = $val;
      return $this;
    }
    public function clearEnd() {
      unset($this->end);
      return $this;
    }
    public function hasEnd() {
      return isset($this->end);
    }
    public function clear() {
      $this->clearName();
      $this->clearStart();
      $this->clearEnd();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->name)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->name));
      }
      if (isset($this->start)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->start));
      }
      if (isset($this->end)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->end));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->name)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->name);
      }
      if (isset($this->start)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->start);
      }
      if (isset($this->end)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->end);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setStart(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setEnd(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasName()) {
        $this->setName($x->getName());
      }
      if ($x->hasStart()) {
        $this->setStart($x->getStart());
      }
      if ($x->hasEnd()) {
        $this->setEnd($x->getEnd());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->name) !== isset($x->name)) return false;
      if (isset($this->name) && $this->name !== $x->name) return false;
      if (isset($this->start) !== isset($x->start)) return false;
      if (isset($this->start) && $this->start !== $x->start) return false;
      if (isset($this->end) !== isset($x->end)) return false;
      if (isset($this->end) && $this->end !== $x->end) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->name)) {
        $res .= $prefix . "name: " . $this->debugFormatString($this->name) . "\n";
      }
      if (isset($this->start)) {
        $res .= $prefix . "start: " . $this->debugFormatString($this->start) . "\n";
      }
      if (isset($this->end)) {
        $res .= $prefix . "end: " . $this->debugFormatString($this->end) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class FacetRequestParam extends \google\net\ProtocolMessage {
    private $range = array();
    private $value_constraint = array();
    public function getValueLimit() {
      if (!isset($this->value_limit)) {
        return 0;
      }
      return $this->value_limit;
    }
    public function setValueLimit($val) {
      $this->value_limit = $val;
      return $this;
    }
    public function clearValueLimit() {
      unset($this->value_limit);
      return $this;
    }
    public function hasValueLimit() {
      return isset($this->value_limit);
    }
    public function getRangeSize() {
      return sizeof($this->range);
    }
    public function getRangeList() {
      return $this->range;
    }
    public function mutableRange($idx) {
      if (!isset($this->range[$idx])) {
        $val = new \google\appengine\FacetRange();
        $this->range[$idx] = $val;
        return $val;
      }
      return $this->range[$idx];
    }
    public function getRange($idx) {
      if (isset($this->range[$idx])) {
        return $this->range[$idx];
      }
      if ($idx >= end(array_keys($this->range))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\FacetRange();
    }
    public function addRange() {
      $val = new \google\appengine\FacetRange();
      $this->range[] = $val;
      return $val;
    }
    public function clearRange() {
      $this->range = array();
    }
    public function getValueConstraintSize() {
      return sizeof($this->value_constraint);
    }
    public function getValueConstraintList() {
      return $this->value_constraint;
    }
    public function getValueConstraint($idx) {
      return $this->value_constraint[$idx];
    }
    public function setValueConstraint($idx, $val) {
      $this->value_constraint[$idx] = $val;
      return $this;
    }
    public function addValueConstraint($val) {
      $this->value_constraint[] = $val;
      return $this;
    }
    public function clearValueConstraint() {
      $this->value_constraint = array();
    }
    public function clear() {
      $this->clearValueLimit();
      $this->clearRange();
      $this->clearValueConstraint();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->value_limit)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->value_limit);
      }
      $this->checkProtoArray($this->range);
      $res += 1 * sizeof($this->range);
      foreach ($this->range as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      $this->checkProtoArray($this->value_constraint);
      $res += 1 * sizeof($this->value_constraint);
      foreach ($this->value_constraint as $value) {
        $res += $this->lengthString(strlen($value));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->value_limit)) {
        $out->putVarInt32(8);
        $out->putVarInt32($this->value_limit);
      }
      $this->checkProtoArray($this->range);
      foreach ($this->range as $value) {
        $out->putVarInt32(18);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      $this->checkProtoArray($this->value_constraint);
      foreach ($this->value_constraint as $value) {
        $out->putVarInt32(26);
        $out->putPrefixedString($value);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 8:
            $this->setValueLimit($d->getVarInt32());
            break;
          case 18:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addRange()->tryMerge($tmp);
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->addValueConstraint(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      foreach ($this->range as $value) {
        if (!$value->isInitialized()) return 'range';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasValueLimit()) {
        $this->setValueLimit($x->getValueLimit());
      }
      foreach ($x->getRangeList() as $v) {
        $this->addRange()->copyFrom($v);
      }
      foreach ($x->getValueConstraintList() as $v) {
        $this->addValueConstraint($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->value_limit) !== isset($x->value_limit)) return false;
      if (isset($this->value_limit) && !$this->integerEquals($this->value_limit, $x->value_limit)) return false;
      if (sizeof($this->range) !== sizeof($x->range)) return false;
      foreach (array_map(null, $this->range, $x->range) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (sizeof($this->value_constraint) !== sizeof($x->value_constraint)) return false;
      foreach (array_map(null, $this->value_constraint, $x->value_constraint) as $v) {
        if ($v[0] !== $v[1]) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->value_limit)) {
        $res .= $prefix . "value_limit: " . $this->debugFormatInt32($this->value_limit) . "\n";
      }
      foreach ($this->range as $value) {
        $res .= $prefix . "range <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      foreach ($this->value_constraint as $value) {
        $res .= $prefix . "value_constraint: " . $this->debugFormatString($value) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class FacetAutoDetectParam extends \google\net\ProtocolMessage {
    public function getValueLimit() {
      if (!isset($this->value_limit)) {
        return 10;
      }
      return $this->value_limit;
    }
    public function setValueLimit($val) {
      $this->value_limit = $val;
      return $this;
    }
    public function clearValueLimit() {
      unset($this->value_limit);
      return $this;
    }
    public function hasValueLimit() {
      return isset($this->value_limit);
    }
    public function clear() {
      $this->clearValueLimit();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->value_limit)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->value_limit);
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->value_limit)) {
        $out->putVarInt32(8);
        $out->putVarInt32($this->value_limit);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 8:
            $this->setValueLimit($d->getVarInt32());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasValueLimit()) {
        $this->setValueLimit($x->getValueLimit());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->value_limit) !== isset($x->value_limit)) return false;
      if (isset($this->value_limit) && !$this->integerEquals($this->value_limit, $x->value_limit)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->value_limit)) {
        $res .= $prefix . "value_limit: " . $this->debugFormatInt32($this->value_limit) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class FacetRequest extends \google\net\ProtocolMessage {
    public function getName() {
      if (!isset($this->name)) {
        return '';
      }
      return $this->name;
    }
    public function setName($val) {
      $this->name = $val;
      return $this;
    }
    public function clearName() {
      unset($this->name);
      return $this;
    }
    public function hasName() {
      return isset($this->name);
    }
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\FacetRequestParam();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\FacetRequestParam();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function clear() {
      $this->clearName();
      $this->clearParams();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->name)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->name));
      }
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->name)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->name);
      }
      if (isset($this->params)) {
        $out->putVarInt32(18);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 18:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->name)) return 'name';
      if (isset($this->params) && (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasName()) {
        $this->setName($x->getName());
      }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->name) !== isset($x->name)) return false;
      if (isset($this->name) && $this->name !== $x->name) return false;
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->name)) {
        $res .= $prefix . "name: " . $this->debugFormatString($this->name) . "\n";
      }
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine\FacetRefinement {
  class Range extends \google\net\ProtocolMessage {
    public function getStart() {
      if (!isset($this->start)) {
        return '';
      }
      return $this->start;
    }
    public function setStart($val) {
      $this->start = $val;
      return $this;
    }
    public function clearStart() {
      unset($this->start);
      return $this;
    }
    public function hasStart() {
      return isset($this->start);
    }
    public function getEnd() {
      if (!isset($this->end)) {
        return '';
      }
      return $this->end;
    }
    public function setEnd($val) {
      $this->end = $val;
      return $this;
    }
    public function clearEnd() {
      unset($this->end);
      return $this;
    }
    public function hasEnd() {
      return isset($this->end);
    }
    public function clear() {
      $this->clearStart();
      $this->clearEnd();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->start)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->start));
      }
      if (isset($this->end)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->end));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->start)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->start);
      }
      if (isset($this->end)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->end);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setStart(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setEnd(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasStart()) {
        $this->setStart($x->getStart());
      }
      if ($x->hasEnd()) {
        $this->setEnd($x->getEnd());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->start) !== isset($x->start)) return false;
      if (isset($this->start) && $this->start !== $x->start) return false;
      if (isset($this->end) !== isset($x->end)) return false;
      if (isset($this->end) && $this->end !== $x->end) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->start)) {
        $res .= $prefix . "start: " . $this->debugFormatString($this->start) . "\n";
      }
      if (isset($this->end)) {
        $res .= $prefix . "end: " . $this->debugFormatString($this->end) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class FacetRefinement extends \google\net\ProtocolMessage {
    public function getName() {
      if (!isset($this->name)) {
        return '';
      }
      return $this->name;
    }
    public function setName($val) {
      $this->name = $val;
      return $this;
    }
    public function clearName() {
      unset($this->name);
      return $this;
    }
    public function hasName() {
      return isset($this->name);
    }
    public function getValue() {
      if (!isset($this->value)) {
        return '';
      }
      return $this->value;
    }
    public function setValue($val) {
      $this->value = $val;
      return $this;
    }
    public function clearValue() {
      unset($this->value);
      return $this;
    }
    public function hasValue() {
      return isset($this->value);
    }
    public function getRange() {
      if (!isset($this->range)) {
        return new \google\appengine\FacetRefinement\Range();
      }
      return $this->range;
    }
    public function mutableRange() {
      if (!isset($this->range)) {
        $res = new \google\appengine\FacetRefinement\Range();
        $this->range = $res;
        return $res;
      }
      return $this->range;
    }
    public function clearRange() {
      if (isset($this->range)) {
        unset($this->range);
      }
    }
    public function hasRange() {
      return isset($this->range);
    }
    public function clear() {
      $this->clearName();
      $this->clearValue();
      $this->clearRange();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->name)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->name));
      }
      if (isset($this->value)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->value));
      }
      if (isset($this->range)) {
        $res += 1;
        $res += $this->lengthString($this->range->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->name)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->name);
      }
      if (isset($this->value)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->value);
      }
      if (isset($this->range)) {
        $out->putVarInt32(26);
        $out->putVarInt32($this->range->byteSizePartial());
        $this->range->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setValue(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 26:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableRange()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->name)) return 'name';
      if (isset($this->range) && (!$this->range->isInitialized())) return 'range';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasName()) {
        $this->setName($x->getName());
      }
      if ($x->hasValue()) {
        $this->setValue($x->getValue());
      }
      if ($x->hasRange()) {
        $this->mutableRange()->mergeFrom($x->getRange());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->name) !== isset($x->name)) return false;
      if (isset($this->name) && $this->name !== $x->name) return false;
      if (isset($this->value) !== isset($x->value)) return false;
      if (isset($this->value) && $this->value !== $x->value) return false;
      if (isset($this->range) !== isset($x->range)) return false;
      if (isset($this->range) && !$this->range->equals($x->range)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->name)) {
        $res .= $prefix . "name: " . $this->debugFormatString($this->name) . "\n";
      }
      if (isset($this->value)) {
        $res .= $prefix . "value: " . $this->debugFormatString($this->value) . "\n";
      }
      if (isset($this->range)) {
        $res .= $prefix . "range <\n" . $this->range->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine\SearchParams {
  class CursorType {
    const NONE = 0;
    const SINGLE = 1;
    const PER_RESULT = 2;
  }
}
namespace google\appengine\SearchParams {
  class ParsingMode {
    const STRICT = 0;
    const RELAXED = 1;
  }
}
namespace google\appengine {
  class SearchParams extends \google\net\ProtocolMessage {
    private $sort_spec = array();
    private $include_facet = array();
    private $facet_refinement = array();
    public function getIndexSpec() {
      if (!isset($this->index_spec)) {
        return new \google\appengine\IndexSpec();
      }
      return $this->index_spec;
    }
    public function mutableIndexSpec() {
      if (!isset($this->index_spec)) {
        $res = new \google\appengine\IndexSpec();
        $this->index_spec = $res;
        return $res;
      }
      return $this->index_spec;
    }
    public function clearIndexSpec() {
      if (isset($this->index_spec)) {
        unset($this->index_spec);
      }
    }
    public function hasIndexSpec() {
      return isset($this->index_spec);
    }
    public function getQuery() {
      if (!isset($this->query)) {
        return '';
      }
      return $this->query;
    }
    public function setQuery($val) {
      $this->query = $val;
      return $this;
    }
    public function clearQuery() {
      unset($this->query);
      return $this;
    }
    public function hasQuery() {
      return isset($this->query);
    }
    public function getCursor() {
      if (!isset($this->cursor)) {
        return '';
      }
      return $this->cursor;
    }
    public function setCursor($val) {
      $this->cursor = $val;
      return $this;
    }
    public function clearCursor() {
      unset($this->cursor);
      return $this;
    }
    public function hasCursor() {
      return isset($this->cursor);
    }
    public function getCursorType() {
      if (!isset($this->cursor_type)) {
        return 0;
      }
      return $this->cursor_type;
    }
    public function setCursorType($val) {
      $this->cursor_type = $val;
      return $this;
    }
    public function clearCursorType() {
      unset($this->cursor_type);
      return $this;
    }
    public function hasCursorType() {
      return isset($this->cursor_type);
    }
    public function getLimit() {
      if (!isset($this->limit)) {
        return 20;
      }
      return $this->limit;
    }
    public function setLimit($val) {
      $this->limit = $val;
      return $this;
    }
    public function clearLimit() {
      unset($this->limit);
      return $this;
    }
    public function hasLimit() {
      return isset($this->limit);
    }
    public function getMatchedCountAccuracy() {
      if (!isset($this->matched_count_accuracy)) {
        return 0;
      }
      return $this->matched_count_accuracy;
    }
    public function setMatchedCountAccuracy($val) {
      $this->matched_count_accuracy = $val;
      return $this;
    }
    public function clearMatchedCountAccuracy() {
      unset($this->matched_count_accuracy);
      return $this;
    }
    public function hasMatchedCountAccuracy() {
      return isset($this->matched_count_accuracy);
    }
    public function getSortSpecSize() {
      return sizeof($this->sort_spec);
    }
    public function getSortSpecList() {
      return $this->sort_spec;
    }
    public function mutableSortSpec($idx) {
      if (!isset($this->sort_spec[$idx])) {
        $val = new \google\appengine\SortSpec();
        $this->sort_spec[$idx] = $val;
        return $val;
      }
      return $this->sort_spec[$idx];
    }
    public function getSortSpec($idx) {
      if (isset($this->sort_spec[$idx])) {
        return $this->sort_spec[$idx];
      }
      if ($idx >= end(array_keys($this->sort_spec))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\SortSpec();
    }
    public function addSortSpec() {
      $val = new \google\appengine\SortSpec();
      $this->sort_spec[] = $val;
      return $val;
    }
    public function clearSortSpec() {
      $this->sort_spec = array();
    }
    public function getScorerSpec() {
      if (!isset($this->scorer_spec)) {
        return new \google\appengine\ScorerSpec();
      }
      return $this->scorer_spec;
    }
    public function mutableScorerSpec() {
      if (!isset($this->scorer_spec)) {
        $res = new \google\appengine\ScorerSpec();
        $this->scorer_spec = $res;
        return $res;
      }
      return $this->scorer_spec;
    }
    public function clearScorerSpec() {
      if (isset($this->scorer_spec)) {
        unset($this->scorer_spec);
      }
    }
    public function hasScorerSpec() {
      return isset($this->scorer_spec);
    }
    public function getFieldSpec() {
      if (!isset($this->field_spec)) {
        return new \google\appengine\FieldSpec();
      }
      return $this->field_spec;
    }
    public function mutableFieldSpec() {
      if (!isset($this->field_spec)) {
        $res = new \google\appengine\FieldSpec();
        $this->field_spec = $res;
        return $res;
      }
      return $this->field_spec;
    }
    public function clearFieldSpec() {
      if (isset($this->field_spec)) {
        unset($this->field_spec);
      }
    }
    public function hasFieldSpec() {
      return isset($this->field_spec);
    }
    public function getOffset() {
      if (!isset($this->offset)) {
        return 0;
      }
      return $this->offset;
    }
    public function setOffset($val) {
      $this->offset = $val;
      return $this;
    }
    public function clearOffset() {
      unset($this->offset);
      return $this;
    }
    public function hasOffset() {
      return isset($this->offset);
    }
    public function getKeysOnly() {
      if (!isset($this->keys_only)) {
        return false;
      }
      return $this->keys_only;
    }
    public function setKeysOnly($val) {
      $this->keys_only = $val;
      return $this;
    }
    public function clearKeysOnly() {
      unset($this->keys_only);
      return $this;
    }
    public function hasKeysOnly() {
      return isset($this->keys_only);
    }
    public function getParsingMode() {
      if (!isset($this->parsing_mode)) {
        return 0;
      }
      return $this->parsing_mode;
    }
    public function setParsingMode($val) {
      $this->parsing_mode = $val;
      return $this;
    }
    public function clearParsingMode() {
      unset($this->parsing_mode);
      return $this;
    }
    public function hasParsingMode() {
      return isset($this->parsing_mode);
    }
    public function getAutoDiscoverFacetCount() {
      if (!isset($this->auto_discover_facet_count)) {
        return 0;
      }
      return $this->auto_discover_facet_count;
    }
    public function setAutoDiscoverFacetCount($val) {
      $this->auto_discover_facet_count = $val;
      return $this;
    }
    public function clearAutoDiscoverFacetCount() {
      unset($this->auto_discover_facet_count);
      return $this;
    }
    public function hasAutoDiscoverFacetCount() {
      return isset($this->auto_discover_facet_count);
    }
    public function getIncludeFacetSize() {
      return sizeof($this->include_facet);
    }
    public function getIncludeFacetList() {
      return $this->include_facet;
    }
    public function mutableIncludeFacet($idx) {
      if (!isset($this->include_facet[$idx])) {
        $val = new \google\appengine\FacetRequest();
        $this->include_facet[$idx] = $val;
        return $val;
      }
      return $this->include_facet[$idx];
    }
    public function getIncludeFacet($idx) {
      if (isset($this->include_facet[$idx])) {
        return $this->include_facet[$idx];
      }
      if ($idx >= end(array_keys($this->include_facet))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\FacetRequest();
    }
    public function addIncludeFacet() {
      $val = new \google\appengine\FacetRequest();
      $this->include_facet[] = $val;
      return $val;
    }
    public function clearIncludeFacet() {
      $this->include_facet = array();
    }
    public function getFacetRefinementSize() {
      return sizeof($this->facet_refinement);
    }
    public function getFacetRefinementList() {
      return $this->facet_refinement;
    }
    public function mutableFacetRefinement($idx) {
      if (!isset($this->facet_refinement[$idx])) {
        $val = new \google\appengine\FacetRefinement();
        $this->facet_refinement[$idx] = $val;
        return $val;
      }
      return $this->facet_refinement[$idx];
    }
    public function getFacetRefinement($idx) {
      if (isset($this->facet_refinement[$idx])) {
        return $this->facet_refinement[$idx];
      }
      if ($idx >= end(array_keys($this->facet_refinement))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\FacetRefinement();
    }
    public function addFacetRefinement() {
      $val = new \google\appengine\FacetRefinement();
      $this->facet_refinement[] = $val;
      return $val;
    }
    public function clearFacetRefinement() {
      $this->facet_refinement = array();
    }
    public function getFacetAutoDetectParam() {
      if (!isset($this->facet_auto_detect_param)) {
        return new \google\appengine\FacetAutoDetectParam();
      }
      return $this->facet_auto_detect_param;
    }
    public function mutableFacetAutoDetectParam() {
      if (!isset($this->facet_auto_detect_param)) {
        $res = new \google\appengine\FacetAutoDetectParam();
        $this->facet_auto_detect_param = $res;
        return $res;
      }
      return $this->facet_auto_detect_param;
    }
    public function clearFacetAutoDetectParam() {
      if (isset($this->facet_auto_detect_param)) {
        unset($this->facet_auto_detect_param);
      }
    }
    public function hasFacetAutoDetectParam() {
      return isset($this->facet_auto_detect_param);
    }
    public function getFacetDepth() {
      if (!isset($this->facet_depth)) {
        return 1000;
      }
      return $this->facet_depth;
    }
    public function setFacetDepth($val) {
      $this->facet_depth = $val;
      return $this;
    }
    public function clearFacetDepth() {
      unset($this->facet_depth);
      return $this;
    }
    public function hasFacetDepth() {
      return isset($this->facet_depth);
    }
    public function clear() {
      $this->clearIndexSpec();
      $this->clearQuery();
      $this->clearCursor();
      $this->clearCursorType();
      $this->clearLimit();
      $this->clearMatchedCountAccuracy();
      $this->clearSortSpec();
      $this->clearScorerSpec();
      $this->clearFieldSpec();
      $this->clearOffset();
      $this->clearKeysOnly();
      $this->clearParsingMode();
      $this->clearAutoDiscoverFacetCount();
      $this->clearIncludeFacet();
      $this->clearFacetRefinement();
      $this->clearFacetAutoDetectParam();
      $this->clearFacetDepth();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->index_spec)) {
        $res += 1;
        $res += $this->lengthString($this->index_spec->byteSizePartial());
      }
      if (isset($this->query)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->query));
      }
      if (isset($this->cursor)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->cursor));
      }
      if (isset($this->cursor_type)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->cursor_type);
      }
      if (isset($this->limit)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->limit);
      }
      if (isset($this->matched_count_accuracy)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->matched_count_accuracy);
      }
      $this->checkProtoArray($this->sort_spec);
      $res += 1 * sizeof($this->sort_spec);
      foreach ($this->sort_spec as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      if (isset($this->scorer_spec)) {
        $res += 1;
        $res += $this->lengthString($this->scorer_spec->byteSizePartial());
      }
      if (isset($this->field_spec)) {
        $res += 1;
        $res += $this->lengthString($this->field_spec->byteSizePartial());
      }
      if (isset($this->offset)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->offset);
      }
      if (isset($this->keys_only)) {
        $res += 2;
      }
      if (isset($this->parsing_mode)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->parsing_mode);
      }
      if (isset($this->auto_discover_facet_count)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->auto_discover_facet_count);
      }
      $this->checkProtoArray($this->include_facet);
      $res += 2 * sizeof($this->include_facet);
      foreach ($this->include_facet as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      $this->checkProtoArray($this->facet_refinement);
      $res += 2 * sizeof($this->facet_refinement);
      foreach ($this->facet_refinement as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      if (isset($this->facet_auto_detect_param)) {
        $res += 2;
        $res += $this->lengthString($this->facet_auto_detect_param->byteSizePartial());
      }
      if (isset($this->facet_depth)) {
        $res += 2;
        $res += $this->lengthVarInt64($this->facet_depth);
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->index_spec)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->index_spec->byteSizePartial());
        $this->index_spec->outputPartial($out);
      }
      if (isset($this->query)) {
        $out->putVarInt32(18);
        $out->putPrefixedString($this->query);
      }
      if (isset($this->cursor)) {
        $out->putVarInt32(34);
        $out->putPrefixedString($this->cursor);
      }
      if (isset($this->cursor_type)) {
        $out->putVarInt32(40);
        $out->putVarInt32($this->cursor_type);
      }
      if (isset($this->limit)) {
        $out->putVarInt32(48);
        $out->putVarInt32($this->limit);
      }
      if (isset($this->matched_count_accuracy)) {
        $out->putVarInt32(56);
        $out->putVarInt32($this->matched_count_accuracy);
      }
      $this->checkProtoArray($this->sort_spec);
      foreach ($this->sort_spec as $value) {
        $out->putVarInt32(66);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      if (isset($this->scorer_spec)) {
        $out->putVarInt32(74);
        $out->putVarInt32($this->scorer_spec->byteSizePartial());
        $this->scorer_spec->outputPartial($out);
      }
      if (isset($this->field_spec)) {
        $out->putVarInt32(82);
        $out->putVarInt32($this->field_spec->byteSizePartial());
        $this->field_spec->outputPartial($out);
      }
      if (isset($this->offset)) {
        $out->putVarInt32(88);
        $out->putVarInt32($this->offset);
      }
      if (isset($this->keys_only)) {
        $out->putVarInt32(96);
        $out->putBoolean($this->keys_only);
      }
      if (isset($this->parsing_mode)) {
        $out->putVarInt32(104);
        $out->putVarInt32($this->parsing_mode);
      }
      if (isset($this->auto_discover_facet_count)) {
        $out->putVarInt32(120);
        $out->putVarInt32($this->auto_discover_facet_count);
      }
      $this->checkProtoArray($this->include_facet);
      foreach ($this->include_facet as $value) {
        $out->putVarInt32(130);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      $this->checkProtoArray($this->facet_refinement);
      foreach ($this->facet_refinement as $value) {
        $out->putVarInt32(138);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      if (isset($this->facet_auto_detect_param)) {
        $out->putVarInt32(146);
        $out->putVarInt32($this->facet_auto_detect_param->byteSizePartial());
        $this->facet_auto_detect_param->outputPartial($out);
      }
      if (isset($this->facet_depth)) {
        $out->putVarInt32(152);
        $out->putVarInt32($this->facet_depth);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableIndexSpec()->tryMerge($tmp);
            break;
          case 18:
            $length = $d->getVarInt32();
            $this->setQuery(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 34:
            $length = $d->getVarInt32();
            $this->setCursor(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 40:
            $this->setCursorType($d->getVarInt32());
            break;
          case 48:
            $this->setLimit($d->getVarInt32());
            break;
          case 56:
            $this->setMatchedCountAccuracy($d->getVarInt32());
            break;
          case 66:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addSortSpec()->tryMerge($tmp);
            break;
          case 74:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableScorerSpec()->tryMerge($tmp);
            break;
          case 82:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableFieldSpec()->tryMerge($tmp);
            break;
          case 88:
            $this->setOffset($d->getVarInt32());
            break;
          case 96:
            $this->setKeysOnly($d->getBoolean());
            break;
          case 104:
            $this->setParsingMode($d->getVarInt32());
            break;
          case 120:
            $this->setAutoDiscoverFacetCount($d->getVarInt32());
            break;
          case 130:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addIncludeFacet()->tryMerge($tmp);
            break;
          case 138:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addFacetRefinement()->tryMerge($tmp);
            break;
          case 146:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableFacetAutoDetectParam()->tryMerge($tmp);
            break;
          case 152:
            $this->setFacetDepth($d->getVarInt32());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->index_spec)) || (!$this->index_spec->isInitialized())) return 'index_spec';
      if (!isset($this->query)) return 'query';
      foreach ($this->sort_spec as $value) {
        if (!$value->isInitialized()) return 'sort_spec';
      }
      if (isset($this->scorer_spec) && (!$this->scorer_spec->isInitialized())) return 'scorer_spec';
      if (isset($this->field_spec) && (!$this->field_spec->isInitialized())) return 'field_spec';
      foreach ($this->include_facet as $value) {
        if (!$value->isInitialized()) return 'include_facet';
      }
      foreach ($this->facet_refinement as $value) {
        if (!$value->isInitialized()) return 'facet_refinement';
      }
      if (isset($this->facet_auto_detect_param) && (!$this->facet_auto_detect_param->isInitialized())) return 'facet_auto_detect_param';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasIndexSpec()) {
        $this->mutableIndexSpec()->mergeFrom($x->getIndexSpec());
      }
      if ($x->hasQuery()) {
        $this->setQuery($x->getQuery());
      }
      if ($x->hasCursor()) {
        $this->setCursor($x->getCursor());
      }
      if ($x->hasCursorType()) {
        $this->setCursorType($x->getCursorType());
      }
      if ($x->hasLimit()) {
        $this->setLimit($x->getLimit());
      }
      if ($x->hasMatchedCountAccuracy()) {
        $this->setMatchedCountAccuracy($x->getMatchedCountAccuracy());
      }
      foreach ($x->getSortSpecList() as $v) {
        $this->addSortSpec()->copyFrom($v);
      }
      if ($x->hasScorerSpec()) {
        $this->mutableScorerSpec()->mergeFrom($x->getScorerSpec());
      }
      if ($x->hasFieldSpec()) {
        $this->mutableFieldSpec()->mergeFrom($x->getFieldSpec());
      }
      if ($x->hasOffset()) {
        $this->setOffset($x->getOffset());
      }
      if ($x->hasKeysOnly()) {
        $this->setKeysOnly($x->getKeysOnly());
      }
      if ($x->hasParsingMode()) {
        $this->setParsingMode($x->getParsingMode());
      }
      if ($x->hasAutoDiscoverFacetCount()) {
        $this->setAutoDiscoverFacetCount($x->getAutoDiscoverFacetCount());
      }
      foreach ($x->getIncludeFacetList() as $v) {
        $this->addIncludeFacet()->copyFrom($v);
      }
      foreach ($x->getFacetRefinementList() as $v) {
        $this->addFacetRefinement()->copyFrom($v);
      }
      if ($x->hasFacetAutoDetectParam()) {
        $this->mutableFacetAutoDetectParam()->mergeFrom($x->getFacetAutoDetectParam());
      }
      if ($x->hasFacetDepth()) {
        $this->setFacetDepth($x->getFacetDepth());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->index_spec) !== isset($x->index_spec)) return false;
      if (isset($this->index_spec) && !$this->index_spec->equals($x->index_spec)) return false;
      if (isset($this->query) !== isset($x->query)) return false;
      if (isset($this->query) && $this->query !== $x->query) return false;
      if (isset($this->cursor) !== isset($x->cursor)) return false;
      if (isset($this->cursor) && $this->cursor !== $x->cursor) return false;
      if (isset($this->cursor_type) !== isset($x->cursor_type)) return false;
      if (isset($this->cursor_type) && $this->cursor_type !== $x->cursor_type) return false;
      if (isset($this->limit) !== isset($x->limit)) return false;
      if (isset($this->limit) && !$this->integerEquals($this->limit, $x->limit)) return false;
      if (isset($this->matched_count_accuracy) !== isset($x->matched_count_accuracy)) return false;
      if (isset($this->matched_count_accuracy) && !$this->integerEquals($this->matched_count_accuracy, $x->matched_count_accuracy)) return false;
      if (sizeof($this->sort_spec) !== sizeof($x->sort_spec)) return false;
      foreach (array_map(null, $this->sort_spec, $x->sort_spec) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (isset($this->scorer_spec) !== isset($x->scorer_spec)) return false;
      if (isset($this->scorer_spec) && !$this->scorer_spec->equals($x->scorer_spec)) return false;
      if (isset($this->field_spec) !== isset($x->field_spec)) return false;
      if (isset($this->field_spec) && !$this->field_spec->equals($x->field_spec)) return false;
      if (isset($this->offset) !== isset($x->offset)) return false;
      if (isset($this->offset) && !$this->integerEquals($this->offset, $x->offset)) return false;
      if (isset($this->keys_only) !== isset($x->keys_only)) return false;
      if (isset($this->keys_only) && $this->keys_only !== $x->keys_only) return false;
      if (isset($this->parsing_mode) !== isset($x->parsing_mode)) return false;
      if (isset($this->parsing_mode) && $this->parsing_mode !== $x->parsing_mode) return false;
      if (isset($this->auto_discover_facet_count) !== isset($x->auto_discover_facet_count)) return false;
      if (isset($this->auto_discover_facet_count) && !$this->integerEquals($this->auto_discover_facet_count, $x->auto_discover_facet_count)) return false;
      if (sizeof($this->include_facet) !== sizeof($x->include_facet)) return false;
      foreach (array_map(null, $this->include_facet, $x->include_facet) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (sizeof($this->facet_refinement) !== sizeof($x->facet_refinement)) return false;
      foreach (array_map(null, $this->facet_refinement, $x->facet_refinement) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (isset($this->facet_auto_detect_param) !== isset($x->facet_auto_detect_param)) return false;
      if (isset($this->facet_auto_detect_param) && !$this->facet_auto_detect_param->equals($x->facet_auto_detect_param)) return false;
      if (isset($this->facet_depth) !== isset($x->facet_depth)) return false;
      if (isset($this->facet_depth) && !$this->integerEquals($this->facet_depth, $x->facet_depth)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->index_spec)) {
        $res .= $prefix . "index_spec <\n" . $this->index_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->query)) {
        $res .= $prefix . "query: " . $this->debugFormatString($this->query) . "\n";
      }
      if (isset($this->cursor)) {
        $res .= $prefix . "cursor: " . $this->debugFormatString($this->cursor) . "\n";
      }
      if (isset($this->cursor_type)) {
        $res .= $prefix . "cursor_type: " . ($this->cursor_type) . "\n";
      }
      if (isset($this->limit)) {
        $res .= $prefix . "limit: " . $this->debugFormatInt32($this->limit) . "\n";
      }
      if (isset($this->matched_count_accuracy)) {
        $res .= $prefix . "matched_count_accuracy: " . $this->debugFormatInt32($this->matched_count_accuracy) . "\n";
      }
      foreach ($this->sort_spec as $value) {
        $res .= $prefix . "sort_spec <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->scorer_spec)) {
        $res .= $prefix . "scorer_spec <\n" . $this->scorer_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->field_spec)) {
        $res .= $prefix . "field_spec <\n" . $this->field_spec->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->offset)) {
        $res .= $prefix . "offset: " . $this->debugFormatInt32($this->offset) . "\n";
      }
      if (isset($this->keys_only)) {
        $res .= $prefix . "keys_only: " . $this->debugFormatBool($this->keys_only) . "\n";
      }
      if (isset($this->parsing_mode)) {
        $res .= $prefix . "parsing_mode: " . ($this->parsing_mode) . "\n";
      }
      if (isset($this->auto_discover_facet_count)) {
        $res .= $prefix . "auto_discover_facet_count: " . $this->debugFormatInt32($this->auto_discover_facet_count) . "\n";
      }
      foreach ($this->include_facet as $value) {
        $res .= $prefix . "include_facet <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      foreach ($this->facet_refinement as $value) {
        $res .= $prefix . "facet_refinement <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->facet_auto_detect_param)) {
        $res .= $prefix . "facet_auto_detect_param <\n" . $this->facet_auto_detect_param->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->facet_depth)) {
        $res .= $prefix . "facet_depth: " . $this->debugFormatInt32($this->facet_depth) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class SearchRequest extends \google\net\ProtocolMessage {
    public function getParams() {
      if (!isset($this->params)) {
        return new \google\appengine\SearchParams();
      }
      return $this->params;
    }
    public function mutableParams() {
      if (!isset($this->params)) {
        $res = new \google\appengine\SearchParams();
        $this->params = $res;
        return $res;
      }
      return $this->params;
    }
    public function clearParams() {
      if (isset($this->params)) {
        unset($this->params);
      }
    }
    public function hasParams() {
      return isset($this->params);
    }
    public function getAppId() {
      if (!isset($this->app_id)) {
        return '';
      }
      return $this->app_id;
    }
    public function setAppId($val) {
      $this->app_id = $val;
      return $this;
    }
    public function clearAppId() {
      unset($this->app_id);
      return $this;
    }
    public function hasAppId() {
      return isset($this->app_id);
    }
    public function clear() {
      $this->clearParams();
      $this->clearAppId();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->params)) {
        $res += 1;
        $res += $this->lengthString($this->params->byteSizePartial());
      }
      if (isset($this->app_id)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->app_id));
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->params)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->params->byteSizePartial());
        $this->params->outputPartial($out);
      }
      if (isset($this->app_id)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->app_id);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableParams()->tryMerge($tmp);
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setAppId(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->params)) || (!$this->params->isInitialized())) return 'params';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasParams()) {
        $this->mutableParams()->mergeFrom($x->getParams());
      }
      if ($x->hasAppId()) {
        $this->setAppId($x->getAppId());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->params) !== isset($x->params)) return false;
      if (isset($this->params) && !$this->params->equals($x->params)) return false;
      if (isset($this->app_id) !== isset($x->app_id)) return false;
      if (isset($this->app_id) && $this->app_id !== $x->app_id) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->params)) {
        $res .= $prefix . "params <\n" . $this->params->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->app_id)) {
        $res .= $prefix . "app_id: " . $this->debugFormatString($this->app_id) . "\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class FacetResultValue extends \google\net\ProtocolMessage {
    public function getName() {
      if (!isset($this->name)) {
        return '';
      }
      return $this->name;
    }
    public function setName($val) {
      $this->name = $val;
      return $this;
    }
    public function clearName() {
      unset($this->name);
      return $this;
    }
    public function hasName() {
      return isset($this->name);
    }
    public function getCount() {
      if (!isset($this->count)) {
        return 0;
      }
      return $this->count;
    }
    public function setCount($val) {
      $this->count = $val;
      return $this;
    }
    public function clearCount() {
      unset($this->count);
      return $this;
    }
    public function hasCount() {
      return isset($this->count);
    }
    public function getRefinement() {
      if (!isset($this->refinement)) {
        return new \google\appengine\FacetRefinement();
      }
      return $this->refinement;
    }
    public function mutableRefinement() {
      if (!isset($this->refinement)) {
        $res = new \google\appengine\FacetRefinement();
        $this->refinement = $res;
        return $res;
      }
      return $this->refinement;
    }
    public function clearRefinement() {
      if (isset($this->refinement)) {
        unset($this->refinement);
      }
    }
    public function hasRefinement() {
      return isset($this->refinement);
    }
    public function clear() {
      $this->clearName();
      $this->clearCount();
      $this->clearRefinement();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->name)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->name));
      }
      if (isset($this->count)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->count);
      }
      if (isset($this->refinement)) {
        $res += 1;
        $res += $this->lengthString($this->refinement->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->name)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->name);
      }
      if (isset($this->count)) {
        $out->putVarInt32(16);
        $out->putVarInt32($this->count);
      }
      if (isset($this->refinement)) {
        $out->putVarInt32(26);
        $out->putVarInt32($this->refinement->byteSizePartial());
        $this->refinement->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 16:
            $this->setCount($d->getVarInt32());
            break;
          case 26:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableRefinement()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->name)) return 'name';
      if (!isset($this->count)) return 'count';
      if ((!isset($this->refinement)) || (!$this->refinement->isInitialized())) return 'refinement';
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasName()) {
        $this->setName($x->getName());
      }
      if ($x->hasCount()) {
        $this->setCount($x->getCount());
      }
      if ($x->hasRefinement()) {
        $this->mutableRefinement()->mergeFrom($x->getRefinement());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->name) !== isset($x->name)) return false;
      if (isset($this->name) && $this->name !== $x->name) return false;
      if (isset($this->count) !== isset($x->count)) return false;
      if (isset($this->count) && !$this->integerEquals($this->count, $x->count)) return false;
      if (isset($this->refinement) !== isset($x->refinement)) return false;
      if (isset($this->refinement) && !$this->refinement->equals($x->refinement)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->name)) {
        $res .= $prefix . "name: " . $this->debugFormatString($this->name) . "\n";
      }
      if (isset($this->count)) {
        $res .= $prefix . "count: " . $this->debugFormatInt32($this->count) . "\n";
      }
      if (isset($this->refinement)) {
        $res .= $prefix . "refinement <\n" . $this->refinement->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class FacetResult extends \google\net\ProtocolMessage {
    private $value = array();
    public function getName() {
      if (!isset($this->name)) {
        return '';
      }
      return $this->name;
    }
    public function setName($val) {
      $this->name = $val;
      return $this;
    }
    public function clearName() {
      unset($this->name);
      return $this;
    }
    public function hasName() {
      return isset($this->name);
    }
    public function getValueSize() {
      return sizeof($this->value);
    }
    public function getValueList() {
      return $this->value;
    }
    public function mutableValue($idx) {
      if (!isset($this->value[$idx])) {
        $val = new \google\appengine\FacetResultValue();
        $this->value[$idx] = $val;
        return $val;
      }
      return $this->value[$idx];
    }
    public function getValue($idx) {
      if (isset($this->value[$idx])) {
        return $this->value[$idx];
      }
      if ($idx >= end(array_keys($this->value))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\FacetResultValue();
    }
    public function addValue() {
      $val = new \google\appengine\FacetResultValue();
      $this->value[] = $val;
      return $val;
    }
    public function clearValue() {
      $this->value = array();
    }
    public function clear() {
      $this->clearName();
      $this->clearValue();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->name)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->name));
      }
      $this->checkProtoArray($this->value);
      $res += 1 * sizeof($this->value);
      foreach ($this->value as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->name)) {
        $out->putVarInt32(10);
        $out->putPrefixedString($this->name);
      }
      $this->checkProtoArray($this->value);
      foreach ($this->value as $value) {
        $out->putVarInt32(18);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $this->setName(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 18:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addValue()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if (!isset($this->name)) return 'name';
      foreach ($this->value as $value) {
        if (!$value->isInitialized()) return 'value';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasName()) {
        $this->setName($x->getName());
      }
      foreach ($x->getValueList() as $v) {
        $this->addValue()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->name) !== isset($x->name)) return false;
      if (isset($this->name) && $this->name !== $x->name) return false;
      if (sizeof($this->value) !== sizeof($x->value)) return false;
      foreach (array_map(null, $this->value, $x->value) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->name)) {
        $res .= $prefix . "name: " . $this->debugFormatString($this->name) . "\n";
      }
      foreach ($this->value as $value) {
        $res .= $prefix . "value <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class SearchResult extends \google\net\ProtocolMessage {
    private $score = array();
    private $expression = array();
    public function getDocument() {
      if (!isset($this->document)) {
        return new \storage_onestore_v3\Document();
      }
      return $this->document;
    }
    public function mutableDocument() {
      if (!isset($this->document)) {
        $res = new \storage_onestore_v3\Document();
        $this->document = $res;
        return $res;
      }
      return $this->document;
    }
    public function clearDocument() {
      if (isset($this->document)) {
        unset($this->document);
      }
    }
    public function hasDocument() {
      return isset($this->document);
    }
    public function getScoreSize() {
      return sizeof($this->score);
    }
    public function getScoreList() {
      return $this->score;
    }
    public function getScore($idx) {
      return $this->score[$idx];
    }
    public function setScore($idx, $val) {
      $this->score[$idx] = $val;
      return $this;
    }
    public function addScore($val) {
      $this->score[] = $val;
      return $this;
    }
    public function clearScore() {
      $this->score = array();
    }
    public function getCursor() {
      if (!isset($this->cursor)) {
        return '';
      }
      return $this->cursor;
    }
    public function setCursor($val) {
      $this->cursor = $val;
      return $this;
    }
    public function clearCursor() {
      unset($this->cursor);
      return $this;
    }
    public function hasCursor() {
      return isset($this->cursor);
    }
    public function getExpressionSize() {
      return sizeof($this->expression);
    }
    public function getExpressionList() {
      return $this->expression;
    }
    public function mutableExpression($idx) {
      if (!isset($this->expression[$idx])) {
        $val = new \storage_onestore_v3\Field();
        $this->expression[$idx] = $val;
        return $val;
      }
      return $this->expression[$idx];
    }
    public function getExpression($idx) {
      if (isset($this->expression[$idx])) {
        return $this->expression[$idx];
      }
      if ($idx >= end(array_keys($this->expression))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \storage_onestore_v3\Field();
    }
    public function addExpression() {
      $val = new \storage_onestore_v3\Field();
      $this->expression[] = $val;
      return $val;
    }
    public function clearExpression() {
      $this->expression = array();
    }
    public function clear() {
      $this->clearDocument();
      $this->clearScore();
      $this->clearCursor();
      $this->clearExpression();
    }
    public function byteSizePartial() {
      $res = 0;
      if (isset($this->document)) {
        $res += 1;
        $res += $this->lengthString($this->document->byteSizePartial());
      }
      $this->checkProtoArray($this->score);
      $res += 9 * sizeof($this->score);
      if (isset($this->cursor)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->cursor));
      }
      $this->checkProtoArray($this->expression);
      $res += 1 * sizeof($this->expression);
      foreach ($this->expression as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      return $res;
    }
    public function outputPartial($out) {
      if (isset($this->document)) {
        $out->putVarInt32(10);
        $out->putVarInt32($this->document->byteSizePartial());
        $this->document->outputPartial($out);
      }
      $this->checkProtoArray($this->score);
      foreach ($this->score as $value) {
        $out->putVarInt32(17);
        $out->putDouble($value);
      }
      if (isset($this->cursor)) {
        $out->putVarInt32(26);
        $out->putPrefixedString($this->cursor);
      }
      $this->checkProtoArray($this->expression);
      foreach ($this->expression as $value) {
        $out->putVarInt32(34);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableDocument()->tryMerge($tmp);
            break;
          case 17:
            $this->addScore($d->getDouble());
            break;
          case 26:
            $length = $d->getVarInt32();
            $this->setCursor(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 34:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addExpression()->tryMerge($tmp);
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      if ((!isset($this->document)) || (!$this->document->isInitialized())) return 'document';
      foreach ($this->expression as $value) {
        if (!$value->isInitialized()) return 'expression';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      if ($x->hasDocument()) {
        $this->mutableDocument()->mergeFrom($x->getDocument());
      }
      foreach ($x->getScoreList() as $v) {
        $this->addScore($v);
      }
      if ($x->hasCursor()) {
        $this->setCursor($x->getCursor());
      }
      foreach ($x->getExpressionList() as $v) {
        $this->addExpression()->copyFrom($v);
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (isset($this->document) !== isset($x->document)) return false;
      if (isset($this->document) && !$this->document->equals($x->document)) return false;
      if (sizeof($this->score) !== sizeof($x->score)) return false;
      foreach (array_map(null, $this->score, $x->score) as $v) {
        if ($v[0] !== $v[1]) return false;
      }
      if (isset($this->cursor) !== isset($x->cursor)) return false;
      if (isset($this->cursor) && $this->cursor !== $x->cursor) return false;
      if (sizeof($this->expression) !== sizeof($x->expression)) return false;
      foreach (array_map(null, $this->expression, $x->expression) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      if (isset($this->document)) {
        $res .= $prefix . "document <\n" . $this->document->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      foreach ($this->score as $value) {
        $res .= $prefix . "score: " . $this->debugFormatDouble($value) . "\n";
      }
      if (isset($this->cursor)) {
        $res .= $prefix . "cursor: " . $this->debugFormatString($this->cursor) . "\n";
      }
      foreach ($this->expression as $value) {
        $res .= $prefix . "expression <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      return $res;
    }
  }
}
namespace google\appengine {
  class SearchResponse extends \google\net\ProtocolMessage {
    private $result = array();
    private $facet_result = array();
    public function getResultSize() {
      return sizeof($this->result);
    }
    public function getResultList() {
      return $this->result;
    }
    public function mutableResult($idx) {
      if (!isset($this->result[$idx])) {
        $val = new \google\appengine\SearchResult();
        $this->result[$idx] = $val;
        return $val;
      }
      return $this->result[$idx];
    }
    public function getResult($idx) {
      if (isset($this->result[$idx])) {
        return $this->result[$idx];
      }
      if ($idx >= end(array_keys($this->result))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\SearchResult();
    }
    public function addResult() {
      $val = new \google\appengine\SearchResult();
      $this->result[] = $val;
      return $val;
    }
    public function clearResult() {
      $this->result = array();
    }
    public function getMatchedCount() {
      if (!isset($this->matched_count)) {
        return "0";
      }
      return $this->matched_count;
    }
    public function setMatchedCount($val) {
      if (is_double($val)) {
        $this->matched_count = sprintf('%0.0F', $val);
      } else {
        $this->matched_count = $val;
      }
      return $this;
    }
    public function clearMatchedCount() {
      unset($this->matched_count);
      return $this;
    }
    public function hasMatchedCount() {
      return isset($this->matched_count);
    }
    public function getStatus() {
      if (!isset($this->status)) {
        return new \google\appengine\RequestStatus();
      }
      return $this->status;
    }
    public function mutableStatus() {
      if (!isset($this->status)) {
        $res = new \google\appengine\RequestStatus();
        $this->status = $res;
        return $res;
      }
      return $this->status;
    }
    public function clearStatus() {
      if (isset($this->status)) {
        unset($this->status);
      }
    }
    public function hasStatus() {
      return isset($this->status);
    }
    public function getCursor() {
      if (!isset($this->cursor)) {
        return '';
      }
      return $this->cursor;
    }
    public function setCursor($val) {
      $this->cursor = $val;
      return $this;
    }
    public function clearCursor() {
      unset($this->cursor);
      return $this;
    }
    public function hasCursor() {
      return isset($this->cursor);
    }
    public function getFacetResultSize() {
      return sizeof($this->facet_result);
    }
    public function getFacetResultList() {
      return $this->facet_result;
    }
    public function mutableFacetResult($idx) {
      if (!isset($this->facet_result[$idx])) {
        $val = new \google\appengine\FacetResult();
        $this->facet_result[$idx] = $val;
        return $val;
      }
      return $this->facet_result[$idx];
    }
    public function getFacetResult($idx) {
      if (isset($this->facet_result[$idx])) {
        return $this->facet_result[$idx];
      }
      if ($idx >= end(array_keys($this->facet_result))) {
        throw new \OutOfRangeException('index out of range: ' + $idx);
      }
      return new \google\appengine\FacetResult();
    }
    public function addFacetResult() {
      $val = new \google\appengine\FacetResult();
      $this->facet_result[] = $val;
      return $val;
    }
    public function clearFacetResult() {
      $this->facet_result = array();
    }
    public function getDocsScored() {
      if (!isset($this->docs_scored)) {
        return 0;
      }
      return $this->docs_scored;
    }
    public function setDocsScored($val) {
      $this->docs_scored = $val;
      return $this;
    }
    public function clearDocsScored() {
      unset($this->docs_scored);
      return $this;
    }
    public function hasDocsScored() {
      return isset($this->docs_scored);
    }
    public function clear() {
      $this->clearResult();
      $this->clearMatchedCount();
      $this->clearStatus();
      $this->clearCursor();
      $this->clearFacetResult();
      $this->clearDocsScored();
    }
    public function byteSizePartial() {
      $res = 0;
      $this->checkProtoArray($this->result);
      $res += 1 * sizeof($this->result);
      foreach ($this->result as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      if (isset($this->matched_count)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->matched_count);
      }
      if (isset($this->status)) {
        $res += 1;
        $res += $this->lengthString($this->status->byteSizePartial());
      }
      if (isset($this->cursor)) {
        $res += 1;
        $res += $this->lengthString(strlen($this->cursor));
      }
      $this->checkProtoArray($this->facet_result);
      $res += 1 * sizeof($this->facet_result);
      foreach ($this->facet_result as $value) {
        $res += $this->lengthString($value->byteSizePartial());
      }
      if (isset($this->docs_scored)) {
        $res += 1;
        $res += $this->lengthVarInt64($this->docs_scored);
      }
      return $res;
    }
    public function outputPartial($out) {
      $this->checkProtoArray($this->result);
      foreach ($this->result as $value) {
        $out->putVarInt32(10);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      if (isset($this->matched_count)) {
        $out->putVarInt32(16);
        $out->putVarInt64($this->matched_count);
      }
      if (isset($this->status)) {
        $out->putVarInt32(26);
        $out->putVarInt32($this->status->byteSizePartial());
        $this->status->outputPartial($out);
      }
      if (isset($this->cursor)) {
        $out->putVarInt32(34);
        $out->putPrefixedString($this->cursor);
      }
      $this->checkProtoArray($this->facet_result);
      foreach ($this->facet_result as $value) {
        $out->putVarInt32(42);
        $out->putVarInt32($value->byteSizePartial());
        $value->outputPartial($out);
      }
      if (isset($this->docs_scored)) {
        $out->putVarInt32(48);
        $out->putVarInt32($this->docs_scored);
      }
    }
    public function tryMerge($d) {
      while($d->avail() > 0) {
        $tt = $d->getVarInt32();
        switch ($tt) {
          case 10:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addResult()->tryMerge($tmp);
            break;
          case 16:
            $this->setMatchedCount($d->getVarInt64());
            break;
          case 26:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->mutableStatus()->tryMerge($tmp);
            break;
          case 34:
            $length = $d->getVarInt32();
            $this->setCursor(substr($d->buffer(), $d->pos(), $length));
            $d->skip($length);
            break;
          case 42:
            $length = $d->getVarInt32();
            $tmp = new \google\net\Decoder($d->buffer(), $d->pos(), $d->pos() + $length);
            $d->skip($length);
            $this->addFacetResult()->tryMerge($tmp);
            break;
          case 48:
            $this->setDocsScored($d->getVarInt32());
            break;
          case 0:
            throw new \google\net\ProtocolBufferDecodeError();
            break;
          default:
            $d->skipData($tt);
        }
      };
    }
    public function checkInitialized() {
      foreach ($this->result as $value) {
        if (!$value->isInitialized()) return 'result';
      }
      if (!isset($this->matched_count)) return 'matched_count';
      if ((!isset($this->status)) || (!$this->status->isInitialized())) return 'status';
      foreach ($this->facet_result as $value) {
        if (!$value->isInitialized()) return 'facet_result';
      }
      return null;
    }
    public function mergeFrom($x) {
      if ($x === $this) { throw new \IllegalArgumentException('Cannot copy message to itself'); }
      foreach ($x->getResultList() as $v) {
        $this->addResult()->copyFrom($v);
      }
      if ($x->hasMatchedCount()) {
        $this->setMatchedCount($x->getMatchedCount());
      }
      if ($x->hasStatus()) {
        $this->mutableStatus()->mergeFrom($x->getStatus());
      }
      if ($x->hasCursor()) {
        $this->setCursor($x->getCursor());
      }
      foreach ($x->getFacetResultList() as $v) {
        $this->addFacetResult()->copyFrom($v);
      }
      if ($x->hasDocsScored()) {
        $this->setDocsScored($x->getDocsScored());
      }
    }
    public function equals($x) {
      if ($x === $this) { return true; }
      if (sizeof($this->result) !== sizeof($x->result)) return false;
      foreach (array_map(null, $this->result, $x->result) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (isset($this->matched_count) !== isset($x->matched_count)) return false;
      if (isset($this->matched_count) && !$this->integerEquals($this->matched_count, $x->matched_count)) return false;
      if (isset($this->status) !== isset($x->status)) return false;
      if (isset($this->status) && !$this->status->equals($x->status)) return false;
      if (isset($this->cursor) !== isset($x->cursor)) return false;
      if (isset($this->cursor) && $this->cursor !== $x->cursor) return false;
      if (sizeof($this->facet_result) !== sizeof($x->facet_result)) return false;
      foreach (array_map(null, $this->facet_result, $x->facet_result) as $v) {
        if (!$v[0]->equals($v[1])) return false;
      }
      if (isset($this->docs_scored) !== isset($x->docs_scored)) return false;
      if (isset($this->docs_scored) && !$this->integerEquals($this->docs_scored, $x->docs_scored)) return false;
      return true;
    }
    public function shortDebugString($prefix = "") {
      $res = '';
      foreach ($this->result as $value) {
        $res .= $prefix . "result <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->matched_count)) {
        $res .= $prefix . "matched_count: " . $this->debugFormatInt64($this->matched_count) . "\n";
      }
      if (isset($this->status)) {
        $res .= $prefix . "status <\n" . $this->status->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->cursor)) {
        $res .= $prefix . "cursor: " . $this->debugFormatString($this->cursor) . "\n";
      }
      foreach ($this->facet_result as $value) {
        $res .= $prefix . "facet_result <\n" . $value->shortDebugString($prefix . "  ") . $prefix . ">\n";
      }
      if (isset($this->docs_scored)) {
        $res .= $prefix . "docs_scored: " . $this->debugFormatInt32($this->docs_scored) . "\n";
      }
      return $res;
    }
  }
}
