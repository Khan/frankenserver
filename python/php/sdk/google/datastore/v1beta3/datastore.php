<?php
/**
 * Copyright 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copyright 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/datastore/v1beta3/datastore.proto
//   Date: 2016-05-13 19:10:56

namespace google\datastore\v1beta3 {

  class LookupRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;

    /**  @var string */
    public $database_id = null;

    /**  @var \google\datastore\v1beta3\ReadOptions */
    public $read_options = null;

    /**  @var \google\datastore\v1beta3\Key[]  */
    public $keys = array();

    /**  @var \google\protobuf\FieldMask */
    public $property_mask = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.LookupRequest');

      // OPTIONAL STRING project_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING database_id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "database_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE read_options = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "read_options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\ReadOptions';
      $descriptor->addField($f);

      // REPEATED MESSAGE keys = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\Key';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE property_mask = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "property_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldMask';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(8);
    }

    /**
     * Clear <project_id> value
     *
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function clearProjectId(){
      return $this->_clear(8);
    }

    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(8);
    }

    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function setProjectId( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <database_id> has a value
     *
     * @return boolean
     */
    public function hasDatabaseId(){
      return $this->_has(9);
    }

    /**
     * Clear <database_id> value
     *
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function clearDatabaseId(){
      return $this->_clear(9);
    }

    /**
     * Get <database_id> value
     *
     * @return string
     */
    public function getDatabaseId(){
      return $this->_get(9);
    }

    /**
     * Set <database_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function setDatabaseId( $value){
      return $this->_set(9, $value);
    }

    /**
     * Check if <read_options> has a value
     *
     * @return boolean
     */
    public function hasReadOptions(){
      return $this->_has(1);
    }

    /**
     * Clear <read_options> value
     *
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function clearReadOptions(){
      return $this->_clear(1);
    }

    /**
     * Get <read_options> value
     *
     * @return \google\datastore\v1beta3\ReadOptions
     */
    public function getReadOptions(){
      return $this->_get(1);
    }

    /**
     * Set <read_options> value
     *
     * @param \google\datastore\v1beta3\ReadOptions $value
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function setReadOptions(\google\datastore\v1beta3\ReadOptions $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(3);
    }

    /**
     * Clear <keys> value
     *
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function clearKeys(){
      return $this->_clear(3);
    }

    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\Key
     */
    public function getKeys($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <keys> value
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function setKeys(\google\datastore\v1beta3\Key $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <keys>
     *
     * @return \google\datastore\v1beta3\Key[]
     */
    public function getKeysList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <keys>
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function addKeys(\google\datastore\v1beta3\Key $value){
     return $this->_add(3, $value);
    }

    /**
     * Check if <property_mask> has a value
     *
     * @return boolean
     */
    public function hasPropertyMask(){
      return $this->_has(5);
    }

    /**
     * Clear <property_mask> value
     *
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function clearPropertyMask(){
      return $this->_clear(5);
    }

    /**
     * Get <property_mask> value
     *
     * @return \google\protobuf\FieldMask
     */
    public function getPropertyMask(){
      return $this->_get(5);
    }

    /**
     * Set <property_mask> value
     *
     * @param \google\protobuf\FieldMask $value
     * @return \google\datastore\v1beta3\LookupRequest
     */
    public function setPropertyMask(\google\protobuf\FieldMask $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class LookupResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\EntityResult[]  */
    public $found = array();

    /**  @var \google\datastore\v1beta3\EntityResult[]  */
    public $missing = array();

    /**  @var \google\datastore\v1beta3\Key[]  */
    public $deferred = array();

    /**  @var string */
    public $transaction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.LookupResponse');

      // REPEATED MESSAGE found = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "found";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\EntityResult';
      $descriptor->addField($f);

      // REPEATED MESSAGE missing = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "missing";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\EntityResult';
      $descriptor->addField($f);

      // REPEATED MESSAGE deferred = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "deferred";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\Key';
      $descriptor->addField($f);

      // OPTIONAL BYTES transaction = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <found> has a value
     *
     * @return boolean
     */
    public function hasFound(){
      return $this->_has(1);
    }

    /**
     * Clear <found> value
     *
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function clearFound(){
      return $this->_clear(1);
    }

    /**
     * Get <found> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function getFound($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <found> value
     *
     * @param \google\datastore\v1beta3\EntityResult $value
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function setFound(\google\datastore\v1beta3\EntityResult $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <found>
     *
     * @return \google\datastore\v1beta3\EntityResult[]
     */
    public function getFoundList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <found>
     *
     * @param \google\datastore\v1beta3\EntityResult $value
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function addFound(\google\datastore\v1beta3\EntityResult $value){
     return $this->_add(1, $value);
    }

    /**
     * Check if <missing> has a value
     *
     * @return boolean
     */
    public function hasMissing(){
      return $this->_has(2);
    }

    /**
     * Clear <missing> value
     *
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function clearMissing(){
      return $this->_clear(2);
    }

    /**
     * Get <missing> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function getMissing($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <missing> value
     *
     * @param \google\datastore\v1beta3\EntityResult $value
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function setMissing(\google\datastore\v1beta3\EntityResult $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <missing>
     *
     * @return \google\datastore\v1beta3\EntityResult[]
     */
    public function getMissingList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <missing>
     *
     * @param \google\datastore\v1beta3\EntityResult $value
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function addMissing(\google\datastore\v1beta3\EntityResult $value){
     return $this->_add(2, $value);
    }

    /**
     * Check if <deferred> has a value
     *
     * @return boolean
     */
    public function hasDeferred(){
      return $this->_has(3);
    }

    /**
     * Clear <deferred> value
     *
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function clearDeferred(){
      return $this->_clear(3);
    }

    /**
     * Get <deferred> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\Key
     */
    public function getDeferred($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <deferred> value
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function setDeferred(\google\datastore\v1beta3\Key $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <deferred>
     *
     * @return \google\datastore\v1beta3\Key[]
     */
    public function getDeferredList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <deferred>
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function addDeferred(\google\datastore\v1beta3\Key $value){
     return $this->_add(3, $value);
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(5);
    }

    /**
     * Clear <transaction> value
     *
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function clearTransaction(){
      return $this->_clear(5);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(5);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\LookupResponse
     */
    public function setTransaction( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class RunQueryRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;

    /**  @var string */
    public $database_id = null;

    /**  @var \google\datastore\v1beta3\PartitionId */
    public $partition_id = null;

    /**  @var \google\datastore\v1beta3\ReadOptions */
    public $read_options = null;

    /**  @var \google\datastore\v1beta3\Query */
    public $query = null;

    /**  @var \google\datastore\v1beta3\GqlQuery */
    public $gql_query = null;

    /**  @var \google\protobuf\FieldMask */
    public $property_mask = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.RunQueryRequest');

      // OPTIONAL STRING project_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING database_id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "database_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE partition_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "partition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\PartitionId';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE read_options = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "read_options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\ReadOptions';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE query = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Query';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gql_query = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "gql_query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\GqlQuery';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE property_mask = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "property_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldMask';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(8);
    }

    /**
     * Clear <project_id> value
     *
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function clearProjectId(){
      return $this->_clear(8);
    }

    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(8);
    }

    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function setProjectId( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <database_id> has a value
     *
     * @return boolean
     */
    public function hasDatabaseId(){
      return $this->_has(9);
    }

    /**
     * Clear <database_id> value
     *
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function clearDatabaseId(){
      return $this->_clear(9);
    }

    /**
     * Get <database_id> value
     *
     * @return string
     */
    public function getDatabaseId(){
      return $this->_get(9);
    }

    /**
     * Set <database_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function setDatabaseId( $value){
      return $this->_set(9, $value);
    }

    /**
     * Check if <partition_id> has a value
     *
     * @return boolean
     */
    public function hasPartitionId(){
      return $this->_has(2);
    }

    /**
     * Clear <partition_id> value
     *
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function clearPartitionId(){
      return $this->_clear(2);
    }

    /**
     * Get <partition_id> value
     *
     * @return \google\datastore\v1beta3\PartitionId
     */
    public function getPartitionId(){
      return $this->_get(2);
    }

    /**
     * Set <partition_id> value
     *
     * @param \google\datastore\v1beta3\PartitionId $value
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function setPartitionId(\google\datastore\v1beta3\PartitionId $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <read_options> has a value
     *
     * @return boolean
     */
    public function hasReadOptions(){
      return $this->_has(1);
    }

    /**
     * Clear <read_options> value
     *
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function clearReadOptions(){
      return $this->_clear(1);
    }

    /**
     * Get <read_options> value
     *
     * @return \google\datastore\v1beta3\ReadOptions
     */
    public function getReadOptions(){
      return $this->_get(1);
    }

    /**
     * Set <read_options> value
     *
     * @param \google\datastore\v1beta3\ReadOptions $value
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function setReadOptions(\google\datastore\v1beta3\ReadOptions $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(3);
    }

    /**
     * Clear <query> value
     *
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function clearQuery(){
      return $this->_clear(3);
    }

    /**
     * Get <query> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function getQuery(){
      return $this->_get(3);
    }

    /**
     * Set <query> value
     *
     * @param \google\datastore\v1beta3\Query $value
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function setQuery(\google\datastore\v1beta3\Query $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <gql_query> has a value
     *
     * @return boolean
     */
    public function hasGqlQuery(){
      return $this->_has(7);
    }

    /**
     * Clear <gql_query> value
     *
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function clearGqlQuery(){
      return $this->_clear(7);
    }

    /**
     * Get <gql_query> value
     *
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function getGqlQuery(){
      return $this->_get(7);
    }

    /**
     * Set <gql_query> value
     *
     * @param \google\datastore\v1beta3\GqlQuery $value
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function setGqlQuery(\google\datastore\v1beta3\GqlQuery $value){
      return $this->_set(7, $value);
    }

    /**
     * Check if <property_mask> has a value
     *
     * @return boolean
     */
    public function hasPropertyMask(){
      return $this->_has(10);
    }

    /**
     * Clear <property_mask> value
     *
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function clearPropertyMask(){
      return $this->_clear(10);
    }

    /**
     * Get <property_mask> value
     *
     * @return \google\protobuf\FieldMask
     */
    public function getPropertyMask(){
      return $this->_get(10);
    }

    /**
     * Set <property_mask> value
     *
     * @param \google\protobuf\FieldMask $value
     * @return \google\datastore\v1beta3\RunQueryRequest
     */
    public function setPropertyMask(\google\protobuf\FieldMask $value){
      return $this->_set(10, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class RunQueryResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\QueryResultBatch */
    public $batch = null;

    /**  @var \google\datastore\v1beta3\Query */
    public $query = null;

    /**  @var string */
    public $transaction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.RunQueryResponse');

      // OPTIONAL MESSAGE batch = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "batch";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\QueryResultBatch';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE query = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Query';
      $descriptor->addField($f);

      // OPTIONAL BYTES transaction = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <batch> has a value
     *
     * @return boolean
     */
    public function hasBatch(){
      return $this->_has(1);
    }

    /**
     * Clear <batch> value
     *
     * @return \google\datastore\v1beta3\RunQueryResponse
     */
    public function clearBatch(){
      return $this->_clear(1);
    }

    /**
     * Get <batch> value
     *
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function getBatch(){
      return $this->_get(1);
    }

    /**
     * Set <batch> value
     *
     * @param \google\datastore\v1beta3\QueryResultBatch $value
     * @return \google\datastore\v1beta3\RunQueryResponse
     */
    public function setBatch(\google\datastore\v1beta3\QueryResultBatch $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(2);
    }

    /**
     * Clear <query> value
     *
     * @return \google\datastore\v1beta3\RunQueryResponse
     */
    public function clearQuery(){
      return $this->_clear(2);
    }

    /**
     * Get <query> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function getQuery(){
      return $this->_get(2);
    }

    /**
     * Set <query> value
     *
     * @param \google\datastore\v1beta3\Query $value
     * @return \google\datastore\v1beta3\RunQueryResponse
     */
    public function setQuery(\google\datastore\v1beta3\Query $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(5);
    }

    /**
     * Clear <transaction> value
     *
     * @return \google\datastore\v1beta3\RunQueryResponse
     */
    public function clearTransaction(){
      return $this->_clear(5);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(5);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\RunQueryResponse
     */
    public function setTransaction( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class BeginTransactionRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;

    /**  @var string */
    public $database_id = null;

    /**  @var \google\datastore\v1beta3\TransactionOptions */
    public $transaction_options = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.BeginTransactionRequest');

      // OPTIONAL STRING project_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING database_id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "database_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE transaction_options = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "transaction_options";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\TransactionOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(8);
    }

    /**
     * Clear <project_id> value
     *
     * @return \google\datastore\v1beta3\BeginTransactionRequest
     */
    public function clearProjectId(){
      return $this->_clear(8);
    }

    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(8);
    }

    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\BeginTransactionRequest
     */
    public function setProjectId( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <database_id> has a value
     *
     * @return boolean
     */
    public function hasDatabaseId(){
      return $this->_has(9);
    }

    /**
     * Clear <database_id> value
     *
     * @return \google\datastore\v1beta3\BeginTransactionRequest
     */
    public function clearDatabaseId(){
      return $this->_clear(9);
    }

    /**
     * Get <database_id> value
     *
     * @return string
     */
    public function getDatabaseId(){
      return $this->_get(9);
    }

    /**
     * Set <database_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\BeginTransactionRequest
     */
    public function setDatabaseId( $value){
      return $this->_set(9, $value);
    }

    /**
     * Check if <transaction_options> has a value
     *
     * @return boolean
     */
    public function hasTransactionOptions(){
      return $this->_has(10);
    }

    /**
     * Clear <transaction_options> value
     *
     * @return \google\datastore\v1beta3\BeginTransactionRequest
     */
    public function clearTransactionOptions(){
      return $this->_clear(10);
    }

    /**
     * Get <transaction_options> value
     *
     * @return \google\datastore\v1beta3\TransactionOptions
     */
    public function getTransactionOptions(){
      return $this->_get(10);
    }

    /**
     * Set <transaction_options> value
     *
     * @param \google\datastore\v1beta3\TransactionOptions $value
     * @return \google\datastore\v1beta3\BeginTransactionRequest
     */
    public function setTransactionOptions(\google\datastore\v1beta3\TransactionOptions $value){
      return $this->_set(10, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class BeginTransactionResponse extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $transaction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.BeginTransactionResponse');

      // OPTIONAL BYTES transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(1);
    }

    /**
     * Clear <transaction> value
     *
     * @return \google\datastore\v1beta3\BeginTransactionResponse
     */
    public function clearTransaction(){
      return $this->_clear(1);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(1);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\BeginTransactionResponse
     */
    public function setTransaction( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class RollbackRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;

    /**  @var string */
    public $database_id = null;

    /**  @var string */
    public $transaction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.RollbackRequest');

      // OPTIONAL STRING project_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING database_id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "database_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(8);
    }

    /**
     * Clear <project_id> value
     *
     * @return \google\datastore\v1beta3\RollbackRequest
     */
    public function clearProjectId(){
      return $this->_clear(8);
    }

    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(8);
    }

    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\RollbackRequest
     */
    public function setProjectId( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <database_id> has a value
     *
     * @return boolean
     */
    public function hasDatabaseId(){
      return $this->_has(9);
    }

    /**
     * Clear <database_id> value
     *
     * @return \google\datastore\v1beta3\RollbackRequest
     */
    public function clearDatabaseId(){
      return $this->_clear(9);
    }

    /**
     * Get <database_id> value
     *
     * @return string
     */
    public function getDatabaseId(){
      return $this->_get(9);
    }

    /**
     * Set <database_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\RollbackRequest
     */
    public function setDatabaseId( $value){
      return $this->_set(9, $value);
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(1);
    }

    /**
     * Clear <transaction> value
     *
     * @return \google\datastore\v1beta3\RollbackRequest
     */
    public function clearTransaction(){
      return $this->_clear(1);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(1);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\RollbackRequest
     */
    public function setTransaction( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class RollbackResponse extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.RollbackResponse');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\datastore\v1beta3\CommitRequest {

  class Mode extends \DrSlump\Protobuf\Enum {
    const MODE_UNSPECIFIED = 0;
    const TRANSACTIONAL = 1;
    const NON_TRANSACTIONAL = 2;
  }
}
namespace google\datastore\v1beta3 {

  class CommitRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;

    /**  @var string */
    public $database_id = null;

    /**  @var int - \google\datastore\v1beta3\CommitRequest\Mode */
    public $mode = null;

    /**  @var string */
    public $transaction = null;

    /**  @var \google\datastore\v1beta3\TransactionOptions */
    public $single_use_transaction = null;

    /**  @var \google\datastore\v1beta3\Mutation[]  */
    public $mutations = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.CommitRequest');

      // OPTIONAL STRING project_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING database_id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "database_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM mode = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "mode";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\CommitRequest\Mode';
      $descriptor->addField($f);

      // OPTIONAL BYTES transaction = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE single_use_transaction = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "single_use_transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\TransactionOptions';
      $descriptor->addField($f);

      // REPEATED MESSAGE mutations = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "mutations";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\Mutation';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(8);
    }

    /**
     * Clear <project_id> value
     *
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function clearProjectId(){
      return $this->_clear(8);
    }

    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(8);
    }

    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function setProjectId( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <database_id> has a value
     *
     * @return boolean
     */
    public function hasDatabaseId(){
      return $this->_has(9);
    }

    /**
     * Clear <database_id> value
     *
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function clearDatabaseId(){
      return $this->_clear(9);
    }

    /**
     * Get <database_id> value
     *
     * @return string
     */
    public function getDatabaseId(){
      return $this->_get(9);
    }

    /**
     * Set <database_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function setDatabaseId( $value){
      return $this->_set(9, $value);
    }

    /**
     * Check if <mode> has a value
     *
     * @return boolean
     */
    public function hasMode(){
      return $this->_has(5);
    }

    /**
     * Clear <mode> value
     *
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function clearMode(){
      return $this->_clear(5);
    }

    /**
     * Get <mode> value
     *
     * @return int - \google\datastore\v1beta3\CommitRequest\Mode
     */
    public function getMode(){
      return $this->_get(5);
    }

    /**
     * Set <mode> value
     *
     * @param int - \google\datastore\v1beta3\CommitRequest\Mode $value
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function setMode( $value){
      return $this->_set(5, $value);
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(1);
    }

    /**
     * Clear <transaction> value
     *
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function clearTransaction(){
      return $this->_clear(1);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(1);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function setTransaction( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <single_use_transaction> has a value
     *
     * @return boolean
     */
    public function hasSingleUseTransaction(){
      return $this->_has(10);
    }

    /**
     * Clear <single_use_transaction> value
     *
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function clearSingleUseTransaction(){
      return $this->_clear(10);
    }

    /**
     * Get <single_use_transaction> value
     *
     * @return \google\datastore\v1beta3\TransactionOptions
     */
    public function getSingleUseTransaction(){
      return $this->_get(10);
    }

    /**
     * Set <single_use_transaction> value
     *
     * @param \google\datastore\v1beta3\TransactionOptions $value
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function setSingleUseTransaction(\google\datastore\v1beta3\TransactionOptions $value){
      return $this->_set(10, $value);
    }

    /**
     * Check if <mutations> has a value
     *
     * @return boolean
     */
    public function hasMutations(){
      return $this->_has(6);
    }

    /**
     * Clear <mutations> value
     *
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function clearMutations(){
      return $this->_clear(6);
    }

    /**
     * Get <mutations> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\Mutation
     */
    public function getMutations($idx = NULL){
      return $this->_get(6, $idx);
    }

    /**
     * Set <mutations> value
     *
     * @param \google\datastore\v1beta3\Mutation $value
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function setMutations(\google\datastore\v1beta3\Mutation $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }

    /**
     * Get all elements of <mutations>
     *
     * @return \google\datastore\v1beta3\Mutation[]
     */
    public function getMutationsList(){
     return $this->_get(6);
    }

    /**
     * Add a new element to <mutations>
     *
     * @param \google\datastore\v1beta3\Mutation $value
     * @return \google\datastore\v1beta3\CommitRequest
     */
    public function addMutations(\google\datastore\v1beta3\Mutation $value){
     return $this->_add(6, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class CommitResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\MutationResult[]  */
    public $mutation_results = array();

    /**  @var int */
    public $index_updates = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.CommitResponse');

      // REPEATED MESSAGE mutation_results = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mutation_results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\MutationResult';
      $descriptor->addField($f);

      // OPTIONAL INT32 index_updates = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "index_updates";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <mutation_results> has a value
     *
     * @return boolean
     */
    public function hasMutationResults(){
      return $this->_has(3);
    }

    /**
     * Clear <mutation_results> value
     *
     * @return \google\datastore\v1beta3\CommitResponse
     */
    public function clearMutationResults(){
      return $this->_clear(3);
    }

    /**
     * Get <mutation_results> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\MutationResult
     */
    public function getMutationResults($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <mutation_results> value
     *
     * @param \google\datastore\v1beta3\MutationResult $value
     * @return \google\datastore\v1beta3\CommitResponse
     */
    public function setMutationResults(\google\datastore\v1beta3\MutationResult $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <mutation_results>
     *
     * @return \google\datastore\v1beta3\MutationResult[]
     */
    public function getMutationResultsList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <mutation_results>
     *
     * @param \google\datastore\v1beta3\MutationResult $value
     * @return \google\datastore\v1beta3\CommitResponse
     */
    public function addMutationResults(\google\datastore\v1beta3\MutationResult $value){
     return $this->_add(3, $value);
    }

    /**
     * Check if <index_updates> has a value
     *
     * @return boolean
     */
    public function hasIndexUpdates(){
      return $this->_has(4);
    }

    /**
     * Clear <index_updates> value
     *
     * @return \google\datastore\v1beta3\CommitResponse
     */
    public function clearIndexUpdates(){
      return $this->_clear(4);
    }

    /**
     * Get <index_updates> value
     *
     * @return int
     */
    public function getIndexUpdates(){
      return $this->_get(4);
    }

    /**
     * Set <index_updates> value
     *
     * @param int $value
     * @return \google\datastore\v1beta3\CommitResponse
     */
    public function setIndexUpdates( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class AllocateIdsRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $project_id = null;

    /**  @var string */
    public $database_id = null;

    /**  @var \google\datastore\v1beta3\Key[]  */
    public $keys = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.AllocateIdsRequest');

      // OPTIONAL STRING project_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "project_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING database_id = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "database_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <project_id> has a value
     *
     * @return boolean
     */
    public function hasProjectId(){
      return $this->_has(8);
    }

    /**
     * Clear <project_id> value
     *
     * @return \google\datastore\v1beta3\AllocateIdsRequest
     */
    public function clearProjectId(){
      return $this->_clear(8);
    }

    /**
     * Get <project_id> value
     *
     * @return string
     */
    public function getProjectId(){
      return $this->_get(8);
    }

    /**
     * Set <project_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\AllocateIdsRequest
     */
    public function setProjectId( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <database_id> has a value
     *
     * @return boolean
     */
    public function hasDatabaseId(){
      return $this->_has(9);
    }

    /**
     * Clear <database_id> value
     *
     * @return \google\datastore\v1beta3\AllocateIdsRequest
     */
    public function clearDatabaseId(){
      return $this->_clear(9);
    }

    /**
     * Get <database_id> value
     *
     * @return string
     */
    public function getDatabaseId(){
      return $this->_get(9);
    }

    /**
     * Set <database_id> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\AllocateIdsRequest
     */
    public function setDatabaseId( $value){
      return $this->_set(9, $value);
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }

    /**
     * Clear <keys> value
     *
     * @return \google\datastore\v1beta3\AllocateIdsRequest
     */
    public function clearKeys(){
      return $this->_clear(1);
    }

    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\Key
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <keys> value
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\AllocateIdsRequest
     */
    public function setKeys(\google\datastore\v1beta3\Key $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <keys>
     *
     * @return \google\datastore\v1beta3\Key[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <keys>
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\AllocateIdsRequest
     */
    public function addKeys(\google\datastore\v1beta3\Key $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class AllocateIdsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\Key[]  */
    public $keys = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.AllocateIdsResponse');

      // REPEATED MESSAGE keys = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "keys";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\Key';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <keys> has a value
     *
     * @return boolean
     */
    public function hasKeys(){
      return $this->_has(1);
    }

    /**
     * Clear <keys> value
     *
     * @return \google\datastore\v1beta3\AllocateIdsResponse
     */
    public function clearKeys(){
      return $this->_clear(1);
    }

    /**
     * Get <keys> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\Key
     */
    public function getKeys($idx = NULL){
      return $this->_get(1, $idx);
    }

    /**
     * Set <keys> value
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\AllocateIdsResponse
     */
    public function setKeys(\google\datastore\v1beta3\Key $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }

    /**
     * Get all elements of <keys>
     *
     * @return \google\datastore\v1beta3\Key[]
     */
    public function getKeysList(){
     return $this->_get(1);
    }

    /**
     * Add a new element to <keys>
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\AllocateIdsResponse
     */
    public function addKeys(\google\datastore\v1beta3\Key $value){
     return $this->_add(1, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class Mutation extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\Entity */
    public $insert = null;

    /**  @var \google\datastore\v1beta3\Entity */
    public $update = null;

    /**  @var \google\datastore\v1beta3\Entity */
    public $upsert = null;

    /**  @var \google\datastore\v1beta3\Key */
    public $delete = null;

    /**  @var int */
    public $base_version = null;

    /**  @var \google\protobuf\FieldMask */
    public $property_mask = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.Mutation');

      // OPTIONAL MESSAGE insert = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "insert";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Entity';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE update = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "update";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Entity';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE upsert = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "upsert";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Entity';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "delete";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Key';
      $descriptor->addField($f);

      // OPTIONAL INT64 base_version = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "base_version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE property_mask = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "property_mask";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\FieldMask';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <insert> has a value
     *
     * @return boolean
     */
    public function hasInsert(){
      return $this->_has(4);
    }

    /**
     * Clear <insert> value
     *
     * @return \google\datastore\v1beta3\Mutation
     */
    public function clearInsert(){
      return $this->_clear(4);
    }

    /**
     * Get <insert> value
     *
     * @return \google\datastore\v1beta3\Entity
     */
    public function getInsert(){
      return $this->_get(4);
    }

    /**
     * Set <insert> value
     *
     * @param \google\datastore\v1beta3\Entity $value
     * @return \google\datastore\v1beta3\Mutation
     */
    public function setInsert(\google\datastore\v1beta3\Entity $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <update> has a value
     *
     * @return boolean
     */
    public function hasUpdate(){
      return $this->_has(5);
    }

    /**
     * Clear <update> value
     *
     * @return \google\datastore\v1beta3\Mutation
     */
    public function clearUpdate(){
      return $this->_clear(5);
    }

    /**
     * Get <update> value
     *
     * @return \google\datastore\v1beta3\Entity
     */
    public function getUpdate(){
      return $this->_get(5);
    }

    /**
     * Set <update> value
     *
     * @param \google\datastore\v1beta3\Entity $value
     * @return \google\datastore\v1beta3\Mutation
     */
    public function setUpdate(\google\datastore\v1beta3\Entity $value){
      return $this->_set(5, $value);
    }

    /**
     * Check if <upsert> has a value
     *
     * @return boolean
     */
    public function hasUpsert(){
      return $this->_has(6);
    }

    /**
     * Clear <upsert> value
     *
     * @return \google\datastore\v1beta3\Mutation
     */
    public function clearUpsert(){
      return $this->_clear(6);
    }

    /**
     * Get <upsert> value
     *
     * @return \google\datastore\v1beta3\Entity
     */
    public function getUpsert(){
      return $this->_get(6);
    }

    /**
     * Set <upsert> value
     *
     * @param \google\datastore\v1beta3\Entity $value
     * @return \google\datastore\v1beta3\Mutation
     */
    public function setUpsert(\google\datastore\v1beta3\Entity $value){
      return $this->_set(6, $value);
    }

    /**
     * Check if <delete> has a value
     *
     * @return boolean
     */
    public function hasDelete(){
      return $this->_has(7);
    }

    /**
     * Clear <delete> value
     *
     * @return \google\datastore\v1beta3\Mutation
     */
    public function clearDelete(){
      return $this->_clear(7);
    }

    /**
     * Get <delete> value
     *
     * @return \google\datastore\v1beta3\Key
     */
    public function getDelete(){
      return $this->_get(7);
    }

    /**
     * Set <delete> value
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\Mutation
     */
    public function setDelete(\google\datastore\v1beta3\Key $value){
      return $this->_set(7, $value);
    }

    /**
     * Check if <base_version> has a value
     *
     * @return boolean
     */
    public function hasBaseVersion(){
      return $this->_has(8);
    }

    /**
     * Clear <base_version> value
     *
     * @return \google\datastore\v1beta3\Mutation
     */
    public function clearBaseVersion(){
      return $this->_clear(8);
    }

    /**
     * Get <base_version> value
     *
     * @return int
     */
    public function getBaseVersion(){
      return $this->_get(8);
    }

    /**
     * Set <base_version> value
     *
     * @param int $value
     * @return \google\datastore\v1beta3\Mutation
     */
    public function setBaseVersion( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <property_mask> has a value
     *
     * @return boolean
     */
    public function hasPropertyMask(){
      return $this->_has(9);
    }

    /**
     * Clear <property_mask> value
     *
     * @return \google\datastore\v1beta3\Mutation
     */
    public function clearPropertyMask(){
      return $this->_clear(9);
    }

    /**
     * Get <property_mask> value
     *
     * @return \google\protobuf\FieldMask
     */
    public function getPropertyMask(){
      return $this->_get(9);
    }

    /**
     * Set <property_mask> value
     *
     * @param \google\protobuf\FieldMask $value
     * @return \google\datastore\v1beta3\Mutation
     */
    public function setPropertyMask(\google\protobuf\FieldMask $value){
      return $this->_set(9, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class MutationResult extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\Key */
    public $key = null;

    /**  @var int */
    public $version = null;

    /**  @var boolean */
    public $conflict_detected = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.MutationResult');

      // OPTIONAL MESSAGE key = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Key';
      $descriptor->addField($f);

      // OPTIONAL INT64 version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL conflict_detected = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "conflict_detected";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(3);
    }

    /**
     * Clear <key> value
     *
     * @return \google\datastore\v1beta3\MutationResult
     */
    public function clearKey(){
      return $this->_clear(3);
    }

    /**
     * Get <key> value
     *
     * @return \google\datastore\v1beta3\Key
     */
    public function getKey(){
      return $this->_get(3);
    }

    /**
     * Set <key> value
     *
     * @param \google\datastore\v1beta3\Key $value
     * @return \google\datastore\v1beta3\MutationResult
     */
    public function setKey(\google\datastore\v1beta3\Key $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(4);
    }

    /**
     * Clear <version> value
     *
     * @return \google\datastore\v1beta3\MutationResult
     */
    public function clearVersion(){
      return $this->_clear(4);
    }

    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(4);
    }

    /**
     * Set <version> value
     *
     * @param int $value
     * @return \google\datastore\v1beta3\MutationResult
     */
    public function setVersion( $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <conflict_detected> has a value
     *
     * @return boolean
     */
    public function hasConflictDetected(){
      return $this->_has(5);
    }

    /**
     * Clear <conflict_detected> value
     *
     * @return \google\datastore\v1beta3\MutationResult
     */
    public function clearConflictDetected(){
      return $this->_clear(5);
    }

    /**
     * Get <conflict_detected> value
     *
     * @return boolean
     */
    public function getConflictDetected(){
      return $this->_get(5);
    }

    /**
     * Set <conflict_detected> value
     *
     * @param boolean $value
     * @return \google\datastore\v1beta3\MutationResult
     */
    public function setConflictDetected( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace google\datastore\v1beta3\ReadOptions {

  class ReadConsistency extends \DrSlump\Protobuf\Enum {
    const READ_CONSISTENCY_UNSPECIFIED = 0;
    const STRONG = 1;
    const EVENTUAL = 2;
  }
}
namespace google\datastore\v1beta3 {

  class ReadOptions extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\datastore\v1beta3\ReadOptions\ReadConsistency */
    public $read_consistency = null;

    /**  @var string */
    public $transaction = null;

    /**  @var \google\datastore\v1beta3\TransactionOptions */
    public $new_transaction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.ReadOptions');

      // OPTIONAL ENUM read_consistency = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "read_consistency";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\ReadOptions\ReadConsistency';
      $descriptor->addField($f);

      // OPTIONAL BYTES transaction = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE new_transaction = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "new_transaction";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\TransactionOptions';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <read_consistency> has a value
     *
     * @return boolean
     */
    public function hasReadConsistency(){
      return $this->_has(1);
    }

    /**
     * Clear <read_consistency> value
     *
     * @return \google\datastore\v1beta3\ReadOptions
     */
    public function clearReadConsistency(){
      return $this->_clear(1);
    }

    /**
     * Get <read_consistency> value
     *
     * @return int - \google\datastore\v1beta3\ReadOptions\ReadConsistency
     */
    public function getReadConsistency(){
      return $this->_get(1);
    }

    /**
     * Set <read_consistency> value
     *
     * @param int - \google\datastore\v1beta3\ReadOptions\ReadConsistency $value
     * @return \google\datastore\v1beta3\ReadOptions
     */
    public function setReadConsistency( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <transaction> has a value
     *
     * @return boolean
     */
    public function hasTransaction(){
      return $this->_has(2);
    }

    /**
     * Clear <transaction> value
     *
     * @return \google\datastore\v1beta3\ReadOptions
     */
    public function clearTransaction(){
      return $this->_clear(2);
    }

    /**
     * Get <transaction> value
     *
     * @return string
     */
    public function getTransaction(){
      return $this->_get(2);
    }

    /**
     * Set <transaction> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\ReadOptions
     */
    public function setTransaction( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <new_transaction> has a value
     *
     * @return boolean
     */
    public function hasNewTransaction(){
      return $this->_has(3);
    }

    /**
     * Clear <new_transaction> value
     *
     * @return \google\datastore\v1beta3\ReadOptions
     */
    public function clearNewTransaction(){
      return $this->_clear(3);
    }

    /**
     * Get <new_transaction> value
     *
     * @return \google\datastore\v1beta3\TransactionOptions
     */
    public function getNewTransaction(){
      return $this->_get(3);
    }

    /**
     * Set <new_transaction> value
     *
     * @param \google\datastore\v1beta3\TransactionOptions $value
     * @return \google\datastore\v1beta3\ReadOptions
     */
    public function setNewTransaction(\google\datastore\v1beta3\TransactionOptions $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\datastore\v1beta3\TransactionOptions {

  class ReadWrite extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.TransactionOptions.ReadWrite');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\datastore\v1beta3\TransactionOptions {

  class ReadOnly extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.TransactionOptions.ReadOnly');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace google\datastore\v1beta3 {

  class TransactionOptions extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\TransactionOptions\ReadWrite */
    public $read_write = null;

    /**  @var \google\datastore\v1beta3\TransactionOptions\ReadOnly */
    public $read_only = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.TransactionOptions');

      // OPTIONAL MESSAGE read_write = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "read_write";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\TransactionOptions\ReadWrite';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE read_only = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "read_only";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\TransactionOptions\ReadOnly';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <read_write> has a value
     *
     * @return boolean
     */
    public function hasReadWrite(){
      return $this->_has(1);
    }

    /**
     * Clear <read_write> value
     *
     * @return \google\datastore\v1beta3\TransactionOptions
     */
    public function clearReadWrite(){
      return $this->_clear(1);
    }

    /**
     * Get <read_write> value
     *
     * @return \google\datastore\v1beta3\TransactionOptions\ReadWrite
     */
    public function getReadWrite(){
      return $this->_get(1);
    }

    /**
     * Set <read_write> value
     *
     * @param \google\datastore\v1beta3\TransactionOptions\ReadWrite $value
     * @return \google\datastore\v1beta3\TransactionOptions
     */
    public function setReadWrite(\google\datastore\v1beta3\TransactionOptions\ReadWrite $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <read_only> has a value
     *
     * @return boolean
     */
    public function hasReadOnly(){
      return $this->_has(2);
    }

    /**
     * Clear <read_only> value
     *
     * @return \google\datastore\v1beta3\TransactionOptions
     */
    public function clearReadOnly(){
      return $this->_clear(2);
    }

    /**
     * Get <read_only> value
     *
     * @return \google\datastore\v1beta3\TransactionOptions\ReadOnly
     */
    public function getReadOnly(){
      return $this->_get(2);
    }

    /**
     * Set <read_only> value
     *
     * @param \google\datastore\v1beta3\TransactionOptions\ReadOnly $value
     * @return \google\datastore\v1beta3\TransactionOptions
     */
    public function setReadOnly(\google\datastore\v1beta3\TransactionOptions\ReadOnly $value){
      return $this->_set(2, $value);
    }
  }
}
