<?php
/**
 * Copyright 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copyright 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: google/datastore/v1beta3/query.proto
//   Date: 2016-05-13 19:10:56

namespace google\datastore\v1beta3\EntityResult {

  class ResultType extends \DrSlump\Protobuf\Enum {
    const RESULT_TYPE_UNSPECIFIED = 0;
    const FULL = 1;
    const PROJECTION = 2;
    const KEY_ONLY = 3;
  }
}
namespace google\datastore\v1beta3 {

  class EntityResult extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\Entity */
    public $entity = null;

    /**  @var int */
    public $version = null;

    /**  @var string */
    public $cursor = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.EntityResult');

      // OPTIONAL MESSAGE entity = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Entity';
      $descriptor->addField($f);

      // OPTIONAL INT64 version = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES cursor = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <entity> has a value
     *
     * @return boolean
     */
    public function hasEntity(){
      return $this->_has(1);
    }

    /**
     * Clear <entity> value
     *
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function clearEntity(){
      return $this->_clear(1);
    }

    /**
     * Get <entity> value
     *
     * @return \google\datastore\v1beta3\Entity
     */
    public function getEntity(){
      return $this->_get(1);
    }

    /**
     * Set <entity> value
     *
     * @param \google\datastore\v1beta3\Entity $value
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function setEntity(\google\datastore\v1beta3\Entity $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <version> has a value
     *
     * @return boolean
     */
    public function hasVersion(){
      return $this->_has(4);
    }

    /**
     * Clear <version> value
     *
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function clearVersion(){
      return $this->_clear(4);
    }

    /**
     * Get <version> value
     *
     * @return int
     */
    public function getVersion(){
      return $this->_get(4);
    }

    /**
     * Set <version> value
     *
     * @param int $value
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function setVersion( $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <cursor> has a value
     *
     * @return boolean
     */
    public function hasCursor(){
      return $this->_has(3);
    }

    /**
     * Clear <cursor> value
     *
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function clearCursor(){
      return $this->_clear(3);
    }

    /**
     * Get <cursor> value
     *
     * @return string
     */
    public function getCursor(){
      return $this->_get(3);
    }

    /**
     * Set <cursor> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function setCursor( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class Query extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\Projection[]  */
    public $projection = array();

    /**  @var \google\datastore\v1beta3\KindExpression[]  */
    public $kind = array();

    /**  @var \google\datastore\v1beta3\Filter */
    public $filter = null;

    /**  @var \google\datastore\v1beta3\PropertyOrder[]  */
    public $order = array();

    /**  @var \google\datastore\v1beta3\PropertyReference[]  */
    public $distinct_on = array();

    /**  @var string */
    public $start_cursor = null;

    /**  @var string */
    public $end_cursor = null;

    /**  @var int */
    public $offset = null;

    /**  @var \google\protobuf\Int32Value */
    public $limit = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.Query');

      // REPEATED MESSAGE projection = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "projection";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\Projection';
      $descriptor->addField($f);

      // REPEATED MESSAGE kind = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "kind";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\KindExpression';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Filter';
      $descriptor->addField($f);

      // REPEATED MESSAGE order = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "order";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\PropertyOrder';
      $descriptor->addField($f);

      // REPEATED MESSAGE distinct_on = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "distinct_on";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\PropertyReference';
      $descriptor->addField($f);

      // OPTIONAL BYTES start_cursor = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "start_cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES end_cursor = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "end_cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 offset = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "offset";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE limit = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "limit";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\protobuf\Int32Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <projection> has a value
     *
     * @return boolean
     */
    public function hasProjection(){
      return $this->_has(2);
    }

    /**
     * Clear <projection> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearProjection(){
      return $this->_clear(2);
    }

    /**
     * Get <projection> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\Projection
     */
    public function getProjection($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <projection> value
     *
     * @param \google\datastore\v1beta3\Projection $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setProjection(\google\datastore\v1beta3\Projection $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <projection>
     *
     * @return \google\datastore\v1beta3\Projection[]
     */
    public function getProjectionList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <projection>
     *
     * @param \google\datastore\v1beta3\Projection $value
     * @return \google\datastore\v1beta3\Query
     */
    public function addProjection(\google\datastore\v1beta3\Projection $value){
     return $this->_add(2, $value);
    }

    /**
     * Check if <kind> has a value
     *
     * @return boolean
     */
    public function hasKind(){
      return $this->_has(3);
    }

    /**
     * Clear <kind> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearKind(){
      return $this->_clear(3);
    }

    /**
     * Get <kind> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\KindExpression
     */
    public function getKind($idx = NULL){
      return $this->_get(3, $idx);
    }

    /**
     * Set <kind> value
     *
     * @param \google\datastore\v1beta3\KindExpression $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setKind(\google\datastore\v1beta3\KindExpression $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }

    /**
     * Get all elements of <kind>
     *
     * @return \google\datastore\v1beta3\KindExpression[]
     */
    public function getKindList(){
     return $this->_get(3);
    }

    /**
     * Add a new element to <kind>
     *
     * @param \google\datastore\v1beta3\KindExpression $value
     * @return \google\datastore\v1beta3\Query
     */
    public function addKind(\google\datastore\v1beta3\KindExpression $value){
     return $this->_add(3, $value);
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(4);
    }

    /**
     * Clear <filter> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearFilter(){
      return $this->_clear(4);
    }

    /**
     * Get <filter> value
     *
     * @return \google\datastore\v1beta3\Filter
     */
    public function getFilter(){
      return $this->_get(4);
    }

    /**
     * Set <filter> value
     *
     * @param \google\datastore\v1beta3\Filter $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setFilter(\google\datastore\v1beta3\Filter $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <order> has a value
     *
     * @return boolean
     */
    public function hasOrder(){
      return $this->_has(5);
    }

    /**
     * Clear <order> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearOrder(){
      return $this->_clear(5);
    }

    /**
     * Get <order> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\PropertyOrder
     */
    public function getOrder($idx = NULL){
      return $this->_get(5, $idx);
    }

    /**
     * Set <order> value
     *
     * @param \google\datastore\v1beta3\PropertyOrder $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setOrder(\google\datastore\v1beta3\PropertyOrder $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <order>
     *
     * @return \google\datastore\v1beta3\PropertyOrder[]
     */
    public function getOrderList(){
     return $this->_get(5);
    }

    /**
     * Add a new element to <order>
     *
     * @param \google\datastore\v1beta3\PropertyOrder $value
     * @return \google\datastore\v1beta3\Query
     */
    public function addOrder(\google\datastore\v1beta3\PropertyOrder $value){
     return $this->_add(5, $value);
    }

    /**
     * Check if <distinct_on> has a value
     *
     * @return boolean
     */
    public function hasDistinctOn(){
      return $this->_has(6);
    }

    /**
     * Clear <distinct_on> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearDistinctOn(){
      return $this->_clear(6);
    }

    /**
     * Get <distinct_on> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\PropertyReference
     */
    public function getDistinctOn($idx = NULL){
      return $this->_get(6, $idx);
    }

    /**
     * Set <distinct_on> value
     *
     * @param \google\datastore\v1beta3\PropertyReference $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setDistinctOn(\google\datastore\v1beta3\PropertyReference $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }

    /**
     * Get all elements of <distinct_on>
     *
     * @return \google\datastore\v1beta3\PropertyReference[]
     */
    public function getDistinctOnList(){
     return $this->_get(6);
    }

    /**
     * Add a new element to <distinct_on>
     *
     * @param \google\datastore\v1beta3\PropertyReference $value
     * @return \google\datastore\v1beta3\Query
     */
    public function addDistinctOn(\google\datastore\v1beta3\PropertyReference $value){
     return $this->_add(6, $value);
    }

    /**
     * Check if <start_cursor> has a value
     *
     * @return boolean
     */
    public function hasStartCursor(){
      return $this->_has(7);
    }

    /**
     * Clear <start_cursor> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearStartCursor(){
      return $this->_clear(7);
    }

    /**
     * Get <start_cursor> value
     *
     * @return string
     */
    public function getStartCursor(){
      return $this->_get(7);
    }

    /**
     * Set <start_cursor> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setStartCursor( $value){
      return $this->_set(7, $value);
    }

    /**
     * Check if <end_cursor> has a value
     *
     * @return boolean
     */
    public function hasEndCursor(){
      return $this->_has(8);
    }

    /**
     * Clear <end_cursor> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearEndCursor(){
      return $this->_clear(8);
    }

    /**
     * Get <end_cursor> value
     *
     * @return string
     */
    public function getEndCursor(){
      return $this->_get(8);
    }

    /**
     * Set <end_cursor> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setEndCursor( $value){
      return $this->_set(8, $value);
    }

    /**
     * Check if <offset> has a value
     *
     * @return boolean
     */
    public function hasOffset(){
      return $this->_has(10);
    }

    /**
     * Clear <offset> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearOffset(){
      return $this->_clear(10);
    }

    /**
     * Get <offset> value
     *
     * @return int
     */
    public function getOffset(){
      return $this->_get(10);
    }

    /**
     * Set <offset> value
     *
     * @param int $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setOffset( $value){
      return $this->_set(10, $value);
    }

    /**
     * Check if <limit> has a value
     *
     * @return boolean
     */
    public function hasLimit(){
      return $this->_has(12);
    }

    /**
     * Clear <limit> value
     *
     * @return \google\datastore\v1beta3\Query
     */
    public function clearLimit(){
      return $this->_clear(12);
    }

    /**
     * Get <limit> value
     *
     * @return \google\protobuf\Int32Value
     */
    public function getLimit(){
      return $this->_get(12);
    }

    /**
     * Set <limit> value
     *
     * @param \google\protobuf\Int32Value $value
     * @return \google\datastore\v1beta3\Query
     */
    public function setLimit(\google\protobuf\Int32Value $value){
      return $this->_set(12, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class KindExpression extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.KindExpression');

      // OPTIONAL STRING name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(1);
    }

    /**
     * Clear <name> value
     *
     * @return \google\datastore\v1beta3\KindExpression
     */
    public function clearName(){
      return $this->_clear(1);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(1);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\KindExpression
     */
    public function setName( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class PropertyReference extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $name = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.PropertyReference');

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }

    /**
     * Clear <name> value
     *
     * @return \google\datastore\v1beta3\PropertyReference
     */
    public function clearName(){
      return $this->_clear(2);
    }

    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }

    /**
     * Set <name> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\PropertyReference
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class Projection extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\PropertyReference */
    public $property = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.Projection');

      // OPTIONAL MESSAGE property = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\PropertyReference';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(1);
    }

    /**
     * Clear <property> value
     *
     * @return \google\datastore\v1beta3\Projection
     */
    public function clearProperty(){
      return $this->_clear(1);
    }

    /**
     * Get <property> value
     *
     * @return \google\datastore\v1beta3\PropertyReference
     */
    public function getProperty(){
      return $this->_get(1);
    }

    /**
     * Set <property> value
     *
     * @param \google\datastore\v1beta3\PropertyReference $value
     * @return \google\datastore\v1beta3\Projection
     */
    public function setProperty(\google\datastore\v1beta3\PropertyReference $value){
      return $this->_set(1, $value);
    }
  }
}

namespace google\datastore\v1beta3\PropertyOrder {

  class Direction extends \DrSlump\Protobuf\Enum {
    const DIRECTION_UNSPECIFIED = 0;
    const ASCENDING = 1;
    const DESCENDING = 2;
  }
}
namespace google\datastore\v1beta3 {

  class PropertyOrder extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\PropertyReference */
    public $property = null;

    /**  @var int - \google\datastore\v1beta3\PropertyOrder\Direction */
    public $direction = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.PropertyOrder');

      // OPTIONAL MESSAGE property = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\PropertyReference';
      $descriptor->addField($f);

      // OPTIONAL ENUM direction = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "direction";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\PropertyOrder\Direction';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(1);
    }

    /**
     * Clear <property> value
     *
     * @return \google\datastore\v1beta3\PropertyOrder
     */
    public function clearProperty(){
      return $this->_clear(1);
    }

    /**
     * Get <property> value
     *
     * @return \google\datastore\v1beta3\PropertyReference
     */
    public function getProperty(){
      return $this->_get(1);
    }

    /**
     * Set <property> value
     *
     * @param \google\datastore\v1beta3\PropertyReference $value
     * @return \google\datastore\v1beta3\PropertyOrder
     */
    public function setProperty(\google\datastore\v1beta3\PropertyReference $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <direction> has a value
     *
     * @return boolean
     */
    public function hasDirection(){
      return $this->_has(2);
    }

    /**
     * Clear <direction> value
     *
     * @return \google\datastore\v1beta3\PropertyOrder
     */
    public function clearDirection(){
      return $this->_clear(2);
    }

    /**
     * Get <direction> value
     *
     * @return int - \google\datastore\v1beta3\PropertyOrder\Direction
     */
    public function getDirection(){
      return $this->_get(2);
    }

    /**
     * Set <direction> value
     *
     * @param int - \google\datastore\v1beta3\PropertyOrder\Direction $value
     * @return \google\datastore\v1beta3\PropertyOrder
     */
    public function setDirection( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class Filter extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\CompositeFilter */
    public $composite_filter = null;

    /**  @var \google\datastore\v1beta3\PropertyFilter */
    public $property_filter = null;

    /**  @var \google\datastore\v1beta3\StContainsFilter */
    public $st_contains_filter = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.Filter');

      // OPTIONAL MESSAGE composite_filter = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "composite_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\CompositeFilter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE property_filter = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "property_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\PropertyFilter';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE st_contains_filter = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "st_contains_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\StContainsFilter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <composite_filter> has a value
     *
     * @return boolean
     */
    public function hasCompositeFilter(){
      return $this->_has(1);
    }

    /**
     * Clear <composite_filter> value
     *
     * @return \google\datastore\v1beta3\Filter
     */
    public function clearCompositeFilter(){
      return $this->_clear(1);
    }

    /**
     * Get <composite_filter> value
     *
     * @return \google\datastore\v1beta3\CompositeFilter
     */
    public function getCompositeFilter(){
      return $this->_get(1);
    }

    /**
     * Set <composite_filter> value
     *
     * @param \google\datastore\v1beta3\CompositeFilter $value
     * @return \google\datastore\v1beta3\Filter
     */
    public function setCompositeFilter(\google\datastore\v1beta3\CompositeFilter $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <property_filter> has a value
     *
     * @return boolean
     */
    public function hasPropertyFilter(){
      return $this->_has(2);
    }

    /**
     * Clear <property_filter> value
     *
     * @return \google\datastore\v1beta3\Filter
     */
    public function clearPropertyFilter(){
      return $this->_clear(2);
    }

    /**
     * Get <property_filter> value
     *
     * @return \google\datastore\v1beta3\PropertyFilter
     */
    public function getPropertyFilter(){
      return $this->_get(2);
    }

    /**
     * Set <property_filter> value
     *
     * @param \google\datastore\v1beta3\PropertyFilter $value
     * @return \google\datastore\v1beta3\Filter
     */
    public function setPropertyFilter(\google\datastore\v1beta3\PropertyFilter $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <st_contains_filter> has a value
     *
     * @return boolean
     */
    public function hasStContainsFilter(){
      return $this->_has(3);
    }

    /**
     * Clear <st_contains_filter> value
     *
     * @return \google\datastore\v1beta3\Filter
     */
    public function clearStContainsFilter(){
      return $this->_clear(3);
    }

    /**
     * Get <st_contains_filter> value
     *
     * @return \google\datastore\v1beta3\StContainsFilter
     */
    public function getStContainsFilter(){
      return $this->_get(3);
    }

    /**
     * Set <st_contains_filter> value
     *
     * @param \google\datastore\v1beta3\StContainsFilter $value
     * @return \google\datastore\v1beta3\Filter
     */
    public function setStContainsFilter(\google\datastore\v1beta3\StContainsFilter $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\datastore\v1beta3\CompositeFilter {

  class Operator extends \DrSlump\Protobuf\Enum {
    const OPERATOR_UNSPECIFIED = 0;
    const AND = 1;
  }
}
namespace google\datastore\v1beta3 {

  class CompositeFilter extends \DrSlump\Protobuf\Message {

    /**  @var int - \google\datastore\v1beta3\CompositeFilter\Operator */
    public $op = null;

    /**  @var \google\datastore\v1beta3\Filter[]  */
    public $filters = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.CompositeFilter');

      // OPTIONAL ENUM op = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "op";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\CompositeFilter\Operator';
      $descriptor->addField($f);

      // REPEATED MESSAGE filters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "filters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\Filter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <op> has a value
     *
     * @return boolean
     */
    public function hasOp(){
      return $this->_has(1);
    }

    /**
     * Clear <op> value
     *
     * @return \google\datastore\v1beta3\CompositeFilter
     */
    public function clearOp(){
      return $this->_clear(1);
    }

    /**
     * Get <op> value
     *
     * @return int - \google\datastore\v1beta3\CompositeFilter\Operator
     */
    public function getOp(){
      return $this->_get(1);
    }

    /**
     * Set <op> value
     *
     * @param int - \google\datastore\v1beta3\CompositeFilter\Operator $value
     * @return \google\datastore\v1beta3\CompositeFilter
     */
    public function setOp( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <filters> has a value
     *
     * @return boolean
     */
    public function hasFilters(){
      return $this->_has(2);
    }

    /**
     * Clear <filters> value
     *
     * @return \google\datastore\v1beta3\CompositeFilter
     */
    public function clearFilters(){
      return $this->_clear(2);
    }

    /**
     * Get <filters> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\Filter
     */
    public function getFilters($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <filters> value
     *
     * @param \google\datastore\v1beta3\Filter $value
     * @return \google\datastore\v1beta3\CompositeFilter
     */
    public function setFilters(\google\datastore\v1beta3\Filter $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <filters>
     *
     * @return \google\datastore\v1beta3\Filter[]
     */
    public function getFiltersList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <filters>
     *
     * @param \google\datastore\v1beta3\Filter $value
     * @return \google\datastore\v1beta3\CompositeFilter
     */
    public function addFilters(\google\datastore\v1beta3\Filter $value){
     return $this->_add(2, $value);
    }
  }
}

namespace google\datastore\v1beta3\PropertyFilter {

  class Operator extends \DrSlump\Protobuf\Enum {
    const OPERATOR_UNSPECIFIED = 0;
    const LESS_THAN = 1;
    const LESS_THAN_OR_EQUAL = 2;
    const GREATER_THAN = 3;
    const GREATER_THAN_OR_EQUAL = 4;
    const EQUAL = 5;
    const HAS_ANCESTOR = 11;
    const HAS_PARENT = 12;
  }
}
namespace google\datastore\v1beta3 {

  class PropertyFilter extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\PropertyReference */
    public $property = null;

    /**  @var int - \google\datastore\v1beta3\PropertyFilter\Operator */
    public $op = null;

    /**  @var \google\datastore\v1beta3\Value */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.PropertyFilter');

      // OPTIONAL MESSAGE property = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\PropertyReference';
      $descriptor->addField($f);

      // OPTIONAL ENUM op = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "op";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\PropertyFilter\Operator';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Value';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(1);
    }

    /**
     * Clear <property> value
     *
     * @return \google\datastore\v1beta3\PropertyFilter
     */
    public function clearProperty(){
      return $this->_clear(1);
    }

    /**
     * Get <property> value
     *
     * @return \google\datastore\v1beta3\PropertyReference
     */
    public function getProperty(){
      return $this->_get(1);
    }

    /**
     * Set <property> value
     *
     * @param \google\datastore\v1beta3\PropertyReference $value
     * @return \google\datastore\v1beta3\PropertyFilter
     */
    public function setProperty(\google\datastore\v1beta3\PropertyReference $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <op> has a value
     *
     * @return boolean
     */
    public function hasOp(){
      return $this->_has(2);
    }

    /**
     * Clear <op> value
     *
     * @return \google\datastore\v1beta3\PropertyFilter
     */
    public function clearOp(){
      return $this->_clear(2);
    }

    /**
     * Get <op> value
     *
     * @return int - \google\datastore\v1beta3\PropertyFilter\Operator
     */
    public function getOp(){
      return $this->_get(2);
    }

    /**
     * Set <op> value
     *
     * @param int - \google\datastore\v1beta3\PropertyFilter\Operator $value
     * @return \google\datastore\v1beta3\PropertyFilter
     */
    public function setOp( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(3);
    }

    /**
     * Clear <value> value
     *
     * @return \google\datastore\v1beta3\PropertyFilter
     */
    public function clearValue(){
      return $this->_clear(3);
    }

    /**
     * Get <value> value
     *
     * @return \google\datastore\v1beta3\Value
     */
    public function getValue(){
      return $this->_get(3);
    }

    /**
     * Set <value> value
     *
     * @param \google\datastore\v1beta3\Value $value
     * @return \google\datastore\v1beta3\PropertyFilter
     */
    public function setValue(\google\datastore\v1beta3\Value $value){
      return $this->_set(3, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class StContainsFilter extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\PropertyReference */
    public $property = null;

    /**  @var \google\datastore\v1beta3\GeoRegion */
    public $contained_in = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.StContainsFilter');

      // OPTIONAL MESSAGE property = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\PropertyReference';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE contained_in = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "contained_in";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\GeoRegion';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <property> has a value
     *
     * @return boolean
     */
    public function hasProperty(){
      return $this->_has(1);
    }

    /**
     * Clear <property> value
     *
     * @return \google\datastore\v1beta3\StContainsFilter
     */
    public function clearProperty(){
      return $this->_clear(1);
    }

    /**
     * Get <property> value
     *
     * @return \google\datastore\v1beta3\PropertyReference
     */
    public function getProperty(){
      return $this->_get(1);
    }

    /**
     * Set <property> value
     *
     * @param \google\datastore\v1beta3\PropertyReference $value
     * @return \google\datastore\v1beta3\StContainsFilter
     */
    public function setProperty(\google\datastore\v1beta3\PropertyReference $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <contained_in> has a value
     *
     * @return boolean
     */
    public function hasContainedIn(){
      return $this->_has(2);
    }

    /**
     * Clear <contained_in> value
     *
     * @return \google\datastore\v1beta3\StContainsFilter
     */
    public function clearContainedIn(){
      return $this->_clear(2);
    }

    /**
     * Get <contained_in> value
     *
     * @return \google\datastore\v1beta3\GeoRegion
     */
    public function getContainedIn(){
      return $this->_get(2);
    }

    /**
     * Set <contained_in> value
     *
     * @param \google\datastore\v1beta3\GeoRegion $value
     * @return \google\datastore\v1beta3\StContainsFilter
     */
    public function setContainedIn(\google\datastore\v1beta3\GeoRegion $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\datastore\v1beta3\GeoRegion {

  class Circle extends \DrSlump\Protobuf\Message {

    /**  @var \google\type\LatLng */
    public $center = null;

    /**  @var float */
    public $radius_meters = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.GeoRegion.Circle');

      // OPTIONAL MESSAGE center = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "center";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\type\LatLng';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE radius_meters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "radius_meters";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <center> has a value
     *
     * @return boolean
     */
    public function hasCenter(){
      return $this->_has(1);
    }

    /**
     * Clear <center> value
     *
     * @return \google\datastore\v1beta3\GeoRegion\Circle
     */
    public function clearCenter(){
      return $this->_clear(1);
    }

    /**
     * Get <center> value
     *
     * @return \google\type\LatLng
     */
    public function getCenter(){
      return $this->_get(1);
    }

    /**
     * Set <center> value
     *
     * @param \google\type\LatLng $value
     * @return \google\datastore\v1beta3\GeoRegion\Circle
     */
    public function setCenter(\google\type\LatLng $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <radius_meters> has a value
     *
     * @return boolean
     */
    public function hasRadiusMeters(){
      return $this->_has(2);
    }

    /**
     * Clear <radius_meters> value
     *
     * @return \google\datastore\v1beta3\GeoRegion\Circle
     */
    public function clearRadiusMeters(){
      return $this->_clear(2);
    }

    /**
     * Get <radius_meters> value
     *
     * @return float
     */
    public function getRadiusMeters(){
      return $this->_get(2);
    }

    /**
     * Set <radius_meters> value
     *
     * @param float $value
     * @return \google\datastore\v1beta3\GeoRegion\Circle
     */
    public function setRadiusMeters( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\datastore\v1beta3\GeoRegion {

  class Rectangle extends \DrSlump\Protobuf\Message {

    /**  @var \google\type\LatLng */
    public $southwest = null;

    /**  @var \google\type\LatLng */
    public $northeast = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.GeoRegion.Rectangle');

      // OPTIONAL MESSAGE southwest = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "southwest";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\type\LatLng';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE northeast = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "northeast";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\type\LatLng';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <southwest> has a value
     *
     * @return boolean
     */
    public function hasSouthwest(){
      return $this->_has(1);
    }

    /**
     * Clear <southwest> value
     *
     * @return \google\datastore\v1beta3\GeoRegion\Rectangle
     */
    public function clearSouthwest(){
      return $this->_clear(1);
    }

    /**
     * Get <southwest> value
     *
     * @return \google\type\LatLng
     */
    public function getSouthwest(){
      return $this->_get(1);
    }

    /**
     * Set <southwest> value
     *
     * @param \google\type\LatLng $value
     * @return \google\datastore\v1beta3\GeoRegion\Rectangle
     */
    public function setSouthwest(\google\type\LatLng $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <northeast> has a value
     *
     * @return boolean
     */
    public function hasNortheast(){
      return $this->_has(2);
    }

    /**
     * Clear <northeast> value
     *
     * @return \google\datastore\v1beta3\GeoRegion\Rectangle
     */
    public function clearNortheast(){
      return $this->_clear(2);
    }

    /**
     * Get <northeast> value
     *
     * @return \google\type\LatLng
     */
    public function getNortheast(){
      return $this->_get(2);
    }

    /**
     * Set <northeast> value
     *
     * @param \google\type\LatLng $value
     * @return \google\datastore\v1beta3\GeoRegion\Rectangle
     */
    public function setNortheast(\google\type\LatLng $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class GeoRegion extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\GeoRegion\Rectangle */
    public $rectangle = null;

    /**  @var \google\datastore\v1beta3\GeoRegion\Circle */
    public $circle = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.GeoRegion');

      // OPTIONAL MESSAGE rectangle = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "rectangle";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\GeoRegion\Rectangle';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE circle = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "circle";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\GeoRegion\Circle';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <rectangle> has a value
     *
     * @return boolean
     */
    public function hasRectangle(){
      return $this->_has(1);
    }

    /**
     * Clear <rectangle> value
     *
     * @return \google\datastore\v1beta3\GeoRegion
     */
    public function clearRectangle(){
      return $this->_clear(1);
    }

    /**
     * Get <rectangle> value
     *
     * @return \google\datastore\v1beta3\GeoRegion\Rectangle
     */
    public function getRectangle(){
      return $this->_get(1);
    }

    /**
     * Set <rectangle> value
     *
     * @param \google\datastore\v1beta3\GeoRegion\Rectangle $value
     * @return \google\datastore\v1beta3\GeoRegion
     */
    public function setRectangle(\google\datastore\v1beta3\GeoRegion\Rectangle $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <circle> has a value
     *
     * @return boolean
     */
    public function hasCircle(){
      return $this->_has(2);
    }

    /**
     * Clear <circle> value
     *
     * @return \google\datastore\v1beta3\GeoRegion
     */
    public function clearCircle(){
      return $this->_clear(2);
    }

    /**
     * Get <circle> value
     *
     * @return \google\datastore\v1beta3\GeoRegion\Circle
     */
    public function getCircle(){
      return $this->_get(2);
    }

    /**
     * Set <circle> value
     *
     * @param \google\datastore\v1beta3\GeoRegion\Circle $value
     * @return \google\datastore\v1beta3\GeoRegion
     */
    public function setCircle(\google\datastore\v1beta3\GeoRegion\Circle $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\datastore\v1beta3\GqlQuery {

  class NamedBindingsEntry extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;

    /**  @var \google\datastore\v1beta3\GqlQueryParameter */
    public $value = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.GqlQuery.NamedBindingsEntry');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\GqlQueryParameter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }

    /**
     * Clear <key> value
     *
     * @return \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry
     */
    public function clearKey(){
      return $this->_clear(1);
    }

    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }

    /**
     * Set <key> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return \google\datastore\v1beta3\GqlQueryParameter
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param \google\datastore\v1beta3\GqlQueryParameter $value
     * @return \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry
     */
    public function setValue(\google\datastore\v1beta3\GqlQueryParameter $value){
      return $this->_set(2, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class GqlQuery extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $query_string = null;

    /**  @var boolean */
    public $allow_literals = null;

    /**  @var \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry[]  */
    public $named_bindings = array();

    /**  @var \google\datastore\v1beta3\GqlQueryParameter[]  */
    public $positional_bindings = array();


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.GqlQuery');

      // OPTIONAL STRING query_string = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "query_string";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL allow_literals = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "allow_literals";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE named_bindings = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "named_bindings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\GqlQuery\NamedBindingsEntry';
      $descriptor->addField($f);

      // REPEATED MESSAGE positional_bindings = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "positional_bindings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\GqlQueryParameter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <query_string> has a value
     *
     * @return boolean
     */
    public function hasQueryString(){
      return $this->_has(1);
    }

    /**
     * Clear <query_string> value
     *
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function clearQueryString(){
      return $this->_clear(1);
    }

    /**
     * Get <query_string> value
     *
     * @return string
     */
    public function getQueryString(){
      return $this->_get(1);
    }

    /**
     * Set <query_string> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function setQueryString( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <allow_literals> has a value
     *
     * @return boolean
     */
    public function hasAllowLiterals(){
      return $this->_has(2);
    }

    /**
     * Clear <allow_literals> value
     *
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function clearAllowLiterals(){
      return $this->_clear(2);
    }

    /**
     * Get <allow_literals> value
     *
     * @return boolean
     */
    public function getAllowLiterals(){
      return $this->_get(2);
    }

    /**
     * Set <allow_literals> value
     *
     * @param boolean $value
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function setAllowLiterals( $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <named_bindings> has a value
     *
     * @return boolean
     */
    public function hasNamedBindings(){
      return $this->_has(5);
    }

    /**
     * Clear <named_bindings> value
     *
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function clearNamedBindings(){
      return $this->_clear(5);
    }

    /**
     * Get <named_bindings> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry
     */
    public function getNamedBindings($idx = NULL){
      return $this->_get(5, $idx);
    }

    /**
     * Set <named_bindings> value
     *
     * @param \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry $value
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function setNamedBindings(\google\datastore\v1beta3\GqlQuery\NamedBindingsEntry $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }

    /**
     * Get all elements of <named_bindings>
     *
     * @return \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry[]
     */
    public function getNamedBindingsList(){
     return $this->_get(5);
    }

    /**
     * Add a new element to <named_bindings>
     *
     * @param \google\datastore\v1beta3\GqlQuery\NamedBindingsEntry $value
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function addNamedBindings(\google\datastore\v1beta3\GqlQuery\NamedBindingsEntry $value){
     return $this->_add(5, $value);
    }

    /**
     * Check if <positional_bindings> has a value
     *
     * @return boolean
     */
    public function hasPositionalBindings(){
      return $this->_has(4);
    }

    /**
     * Clear <positional_bindings> value
     *
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function clearPositionalBindings(){
      return $this->_clear(4);
    }

    /**
     * Get <positional_bindings> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\GqlQueryParameter
     */
    public function getPositionalBindings($idx = NULL){
      return $this->_get(4, $idx);
    }

    /**
     * Set <positional_bindings> value
     *
     * @param \google\datastore\v1beta3\GqlQueryParameter $value
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function setPositionalBindings(\google\datastore\v1beta3\GqlQueryParameter $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }

    /**
     * Get all elements of <positional_bindings>
     *
     * @return \google\datastore\v1beta3\GqlQueryParameter[]
     */
    public function getPositionalBindingsList(){
     return $this->_get(4);
    }

    /**
     * Add a new element to <positional_bindings>
     *
     * @param \google\datastore\v1beta3\GqlQueryParameter $value
     * @return \google\datastore\v1beta3\GqlQuery
     */
    public function addPositionalBindings(\google\datastore\v1beta3\GqlQueryParameter $value){
     return $this->_add(4, $value);
    }
  }
}

namespace google\datastore\v1beta3 {

  class GqlQueryParameter extends \DrSlump\Protobuf\Message {

    /**  @var \google\datastore\v1beta3\Value */
    public $value = null;

    /**  @var string */
    public $cursor = null;

    /**  @var \google\datastore\v1beta3\GeoRegion */
    public $geo_region = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.GqlQueryParameter');

      // OPTIONAL MESSAGE value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\Value';
      $descriptor->addField($f);

      // OPTIONAL BYTES cursor = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE geo_region = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "geo_region";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\GeoRegion';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }

    /**
     * Clear <value> value
     *
     * @return \google\datastore\v1beta3\GqlQueryParameter
     */
    public function clearValue(){
      return $this->_clear(2);
    }

    /**
     * Get <value> value
     *
     * @return \google\datastore\v1beta3\Value
     */
    public function getValue(){
      return $this->_get(2);
    }

    /**
     * Set <value> value
     *
     * @param \google\datastore\v1beta3\Value $value
     * @return \google\datastore\v1beta3\GqlQueryParameter
     */
    public function setValue(\google\datastore\v1beta3\Value $value){
      return $this->_set(2, $value);
    }

    /**
     * Check if <cursor> has a value
     *
     * @return boolean
     */
    public function hasCursor(){
      return $this->_has(3);
    }

    /**
     * Clear <cursor> value
     *
     * @return \google\datastore\v1beta3\GqlQueryParameter
     */
    public function clearCursor(){
      return $this->_clear(3);
    }

    /**
     * Get <cursor> value
     *
     * @return string
     */
    public function getCursor(){
      return $this->_get(3);
    }

    /**
     * Set <cursor> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\GqlQueryParameter
     */
    public function setCursor( $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <geo_region> has a value
     *
     * @return boolean
     */
    public function hasGeoRegion(){
      return $this->_has(4);
    }

    /**
     * Clear <geo_region> value
     *
     * @return \google\datastore\v1beta3\GqlQueryParameter
     */
    public function clearGeoRegion(){
      return $this->_clear(4);
    }

    /**
     * Get <geo_region> value
     *
     * @return \google\datastore\v1beta3\GeoRegion
     */
    public function getGeoRegion(){
      return $this->_get(4);
    }

    /**
     * Set <geo_region> value
     *
     * @param \google\datastore\v1beta3\GeoRegion $value
     * @return \google\datastore\v1beta3\GqlQueryParameter
     */
    public function setGeoRegion(\google\datastore\v1beta3\GeoRegion $value){
      return $this->_set(4, $value);
    }
  }
}

namespace google\datastore\v1beta3\QueryResultBatch {

  class MoreResultsType extends \DrSlump\Protobuf\Enum {
    const MORE_RESULTS_TYPE_UNSPECIFIED = 0;
    const NOT_FINISHED = 1;
    const MORE_RESULTS_AFTER_LIMIT = 2;
    const MORE_RESULTS_AFTER_CURSOR = 4;
    const NO_MORE_RESULTS = 3;
  }
}
namespace google\datastore\v1beta3 {

  class QueryResultBatch extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $skipped_results = null;

    /**  @var string */
    public $skipped_cursor = null;

    /**  @var int - \google\datastore\v1beta3\EntityResult\ResultType */
    public $entity_result_type = null;

    /**  @var \google\datastore\v1beta3\EntityResult[]  */
    public $entity_results = array();

    /**  @var string */
    public $end_cursor = null;

    /**  @var int - \google\datastore\v1beta3\QueryResultBatch\MoreResultsType */
    public $more_results = null;

    /**  @var int */
    public $snapshot_version = null;


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'google.datastore.v1beta3.QueryResultBatch');

      // OPTIONAL INT32 skipped_results = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "skipped_results";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES skipped_cursor = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "skipped_cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM entity_result_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "entity_result_type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\EntityResult\ResultType';
      $descriptor->addField($f);

      // REPEATED MESSAGE entity_results = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "entity_results";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\google\datastore\v1beta3\EntityResult';
      $descriptor->addField($f);

      // OPTIONAL BYTES end_cursor = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "end_cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM more_results = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "more_results";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\google\datastore\v1beta3\QueryResultBatch\MoreResultsType';
      $descriptor->addField($f);

      // OPTIONAL INT64 snapshot_version = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "snapshot_version";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <skipped_results> has a value
     *
     * @return boolean
     */
    public function hasSkippedResults(){
      return $this->_has(6);
    }

    /**
     * Clear <skipped_results> value
     *
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function clearSkippedResults(){
      return $this->_clear(6);
    }

    /**
     * Get <skipped_results> value
     *
     * @return int
     */
    public function getSkippedResults(){
      return $this->_get(6);
    }

    /**
     * Set <skipped_results> value
     *
     * @param int $value
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function setSkippedResults( $value){
      return $this->_set(6, $value);
    }

    /**
     * Check if <skipped_cursor> has a value
     *
     * @return boolean
     */
    public function hasSkippedCursor(){
      return $this->_has(3);
    }

    /**
     * Clear <skipped_cursor> value
     *
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function clearSkippedCursor(){
      return $this->_clear(3);
    }

    /**
     * Get <skipped_cursor> value
     *
     * @return string
     */
    public function getSkippedCursor(){
      return $this->_get(3);
    }

    /**
     * Set <skipped_cursor> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function setSkippedCursor( $value){
      return $this->_set(3, $value);
    }

    /**
     * Check if <entity_result_type> has a value
     *
     * @return boolean
     */
    public function hasEntityResultType(){
      return $this->_has(1);
    }

    /**
     * Clear <entity_result_type> value
     *
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function clearEntityResultType(){
      return $this->_clear(1);
    }

    /**
     * Get <entity_result_type> value
     *
     * @return int - \google\datastore\v1beta3\EntityResult\ResultType
     */
    public function getEntityResultType(){
      return $this->_get(1);
    }

    /**
     * Set <entity_result_type> value
     *
     * @param int - \google\datastore\v1beta3\EntityResult\ResultType $value
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function setEntityResultType( $value){
      return $this->_set(1, $value);
    }

    /**
     * Check if <entity_results> has a value
     *
     * @return boolean
     */
    public function hasEntityResults(){
      return $this->_has(2);
    }

    /**
     * Clear <entity_results> value
     *
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function clearEntityResults(){
      return $this->_clear(2);
    }

    /**
     * Get <entity_results> value
     *
     * @param int $idx
     * @return \google\datastore\v1beta3\EntityResult
     */
    public function getEntityResults($idx = NULL){
      return $this->_get(2, $idx);
    }

    /**
     * Set <entity_results> value
     *
     * @param \google\datastore\v1beta3\EntityResult $value
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function setEntityResults(\google\datastore\v1beta3\EntityResult $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }

    /**
     * Get all elements of <entity_results>
     *
     * @return \google\datastore\v1beta3\EntityResult[]
     */
    public function getEntityResultsList(){
     return $this->_get(2);
    }

    /**
     * Add a new element to <entity_results>
     *
     * @param \google\datastore\v1beta3\EntityResult $value
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function addEntityResults(\google\datastore\v1beta3\EntityResult $value){
     return $this->_add(2, $value);
    }

    /**
     * Check if <end_cursor> has a value
     *
     * @return boolean
     */
    public function hasEndCursor(){
      return $this->_has(4);
    }

    /**
     * Clear <end_cursor> value
     *
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function clearEndCursor(){
      return $this->_clear(4);
    }

    /**
     * Get <end_cursor> value
     *
     * @return string
     */
    public function getEndCursor(){
      return $this->_get(4);
    }

    /**
     * Set <end_cursor> value
     *
     * @param string $value
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function setEndCursor( $value){
      return $this->_set(4, $value);
    }

    /**
     * Check if <more_results> has a value
     *
     * @return boolean
     */
    public function hasMoreResults(){
      return $this->_has(5);
    }

    /**
     * Clear <more_results> value
     *
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function clearMoreResults(){
      return $this->_clear(5);
    }

    /**
     * Get <more_results> value
     *
     * @return int - \google\datastore\v1beta3\QueryResultBatch\MoreResultsType
     */
    public function getMoreResults(){
      return $this->_get(5);
    }

    /**
     * Set <more_results> value
     *
     * @param int - \google\datastore\v1beta3\QueryResultBatch\MoreResultsType $value
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function setMoreResults( $value){
      return $this->_set(5, $value);
    }

    /**
     * Check if <snapshot_version> has a value
     *
     * @return boolean
     */
    public function hasSnapshotVersion(){
      return $this->_has(7);
    }

    /**
     * Clear <snapshot_version> value
     *
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function clearSnapshotVersion(){
      return $this->_clear(7);
    }

    /**
     * Get <snapshot_version> value
     *
     * @return int
     */
    public function getSnapshotVersion(){
      return $this->_get(7);
    }

    /**
     * Set <snapshot_version> value
     *
     * @param int $value
     * @return \google\datastore\v1beta3\QueryResultBatch
     */
    public function setSnapshotVersion( $value){
      return $this->_set(7, $value);
    }
  }
}
